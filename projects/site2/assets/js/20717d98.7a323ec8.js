"use strict";(self.webpackChunkggcrunchy_docs=self.webpackChunkggcrunchy_docs||[]).push([[3995],{7757:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var s=n(4848),i=n(8453);const o={sidebar_position:20},r=void 0,l={id:"plugins/list/streamlines",title:"streamlines",description:"Original has some docs / demos.",source:"@site/docs/plugins/list/streamlines.md",sourceDirName:"plugins/list",slug:"/plugins/list/streamlines",permalink:"/projects/site2/docs/plugins/list/streamlines",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/plugins/list/streamlines.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"pluginsSidebar",previous:{title:"stablearray",permalink:"/projects/site2/docs/plugins/list/stablearray"},next:{title:"tinyfiledialogs",permalink:"/projects/site2/docs/plugins/list/tinyfiledialogs"}},a={},c=[];function d(t){const e={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:"Original has some docs / demos."}),"\n",(0,s.jsx)(e.p,{children:'Actual "streamlines" test has issues due to 16-bit indices.'}),"\n",(0,s.jsx)(e.p,{children:"ByteReader needs attention."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"FLAGS"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'\t"WIREFRAME", "ANNOTATIONS", "SPINE_LENGTHS", "RANDOM_OFFSETS", "CURVE_GUIDES"\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"MODES"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'\t"none", "annotations", "positions", "random_offsets", "spine_lengths", "triangle_indices"\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"FUNCS"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'\tcontext = create_context(thickness) -- > 0\n\tcontext = create_context(options)\n\n\t\tflags: string / table of stringslua_getfield(L, 1, "flags");// params, flags\n\t\tu_mode: ditto\n\t\tcurves_max_flatness: default 0\n\t\tconfig.streamlines_seed_spacing: default 0\n\t\tstreamlines_seed_viewport: { left, right, top, bottom } (optional table with those keys, numbers)\n\t\tmiter_limit: default 0\n\t\tthickness: required, > 0\n\n\tproxy = NewProxy()\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"METHODS"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"\tmesh = context:mesh_from_curves_cubic(spine_list)\n\t\n\t\tvertices:\n\t\t\n\t\t\tn pairs of float bytes, or\n\t\t\tarray of n * 2 numbers\n\t\t\n\t\tspine_lengths:\n\t\t\n\t\t\tn uint16_t bytes, or\n\t\t\tarray of n integers\n\t\t\t\n\t\tclosed:\n\t\t\n\t\t\tboolean (optional)\n\t\n\tmesh = context:mesh_from_curves_quadratic(spine_list)\n\tmesh = context:mesh_from_lines(spine_list)\n\t\n\tmesh = context:mesh_from_streamlines(func / callable, first_tick, num_ticks) -- first_tick >= 0; x, y = func(x, y)\n\n\tannotations / nil = mesh:GetAnnotations(opts) -- nil if no vertices\n\t\n\t\t-- out: optional output table (or proxy, then do other overload) (new table otherwise) { x, y, z, w } (keys)\n\t\n\tproxy = mesh:GetAnnotations(proxy) -- sets mode; see __bytes\n\n\tcount = mesh:GetNumTriangles()\n\tcount = mesh:GetNumVertices()\n\n\tpositions / nil = mesh:GetPositions(opts) -- cf. GetAnnotations() w.r.t. out, flat array of { ..., x, y, ... }\n\tproxy = mesh:GetPositions(proxy) -- ditto w.r.t. __bytes\n\n\trandom_offsets / nil = mesh:GetRandomOffsets(opts) -- cf. GetAnnotations() w.r.t. out, flat array of { ..., offset, ... }\n\tproxy = mesh:GetPositions(proxy) -- ditto w.r.t. __bytes\n\n\tspine_lengths / nil = mesh:GetSpineLengths(opts) -- cf. GetAnnotations() w.r.t. out, flat array of { ..., length, ... }\n\tproxy = mesh:GetPositions(proxy) -- ditto w.r.t. __bytes\n\n\ttriangle_indices / nil = mesh:GetTriangles(opts) -- cf. GetAnnotations() w.r.t. out, flat array of { ..., index, ... }\n\tproxy = mesh:GetTriangles(proxy) -- ditto w.r.t. __bytes\n\n\tproxy __bytes, per mode:\n\t\n\t\t- annotations: #verts * 4 floats\n\t\t- positions: #verts * 2 floats\n\t\t- random_offsets: #verts * float\n\t\t- spine_lengths: #verts * float\n\t\t- triangle_indices: #tris * 3 * 32-bit uint (4 if wireframe)\n\n\tmode = proxy:GetMode()\n\t\n\tproxy:Reset()\n"})})]})}function p(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(d,{...t})}):d(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>r,x:()=>l});var s=n(6540);const i={},o=s.createContext(i);function r(t){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function l(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:r(t.components),s.createElement(o.Provider,{value:e},t.children)}}}]);