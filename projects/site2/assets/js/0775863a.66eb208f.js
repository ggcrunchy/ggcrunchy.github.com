"use strict";(self.webpackChunkggcrunchy_docs=self.webpackChunkggcrunchy_docs||[]).push([[8050],{9058:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(4848),r=n(8453);const a={sidebar_position:18},l=void 0,s={id:"plugins/list/soloud",title:"soloud",description:"Original has docs, for C.",source:"@site/docs/plugins/list/soloud.md",sourceDirName:"plugins/list",slug:"/plugins/list/soloud",permalink:"/docs/plugins/list/soloud",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/plugins/list/soloud.md",tags:[],version:"current",sidebarPosition:18,frontMatter:{sidebar_position:18},sidebar:"pluginsSidebar",previous:{title:"serialize",permalink:"/docs/plugins/list/serialize"},next:{title:"stablearray",permalink:"/docs/plugins/list/stablearray"}},i={},c=[];function u(e){const t={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"Original has docs, for C."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"TYPES:"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'\tAttenuation model:\n\n\t\t"NO_ATTENUATION", "INVERSE_DISTANCE", "LINEAR_DISTANCE", "EXPONENTIAL_DISTANCE"\n\t\n\tParamType:\n\t\n\t\t"BOOL", "FLOAT", "INT"\n\t\n\tResampler:\n\t\n\t\t"POINT", "LINEAR", "CATMULLROM"\n\n\tWaveform:\n\t\n\t\t"SQUARE", "SAW", "SIN", "TRIANGLE", "BOUNCE", "JAWS", "HUMPS", "FSQUARE", "FSAW"\n'})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"FUNCS:"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'\tAy = createAy()\n\tBassboostFilter = createBassboostFilter()\n\tBiquadResonantFilter = createBiquadResonantFilter()\n\tBus = createBus()\n\tCore = createCore(opts)\n\n\t\tflags = may be string or table of strings = "CLIP_ROUNDOFF", "ENABLE_VISUALIZATION", "LEFT_HANDED_3D", "NO_FPU_REGISTER_CHANGE"\n\t\tbackend = one of "AUTO" (default, = MINIAUDIO), "WINMM" (Windows), "COREAUDIO" (Apple), "OPENSLES" (Android), "MINIAUDIO", "NOSOUND", "NULLDRIVER"\n\t\t\t\n\t\t\t-- not (yet?) implemented = SDL1, SDL2, PORTAUDIO, XAUDIO2, WASAPI, ALSA, JACK, OSS, OPENAL, VITA_HOMEBREW\n\n\t\tintegers:\n\t\t\n\t\tsamplerate, buffersize (default 0) -- TODO: use camel case for consistency?\n\t\tchannels (default 2)\n\n\tCustomFilter = createCustomFilter(STUFF) -- TODO\n\tCustomSource = createCustomSource(STUFF) -- TODO\n\tDCRemovaltFilter = createDCRemovaltFilter()\n\tDuckFilter = createDuckFilter()\n\tEchoFilter = createEchoFilter()\n\tEQFilter = createEQFilter()\n\tFloatBuffer = createFloatBuffer(size)\n\tFFTFilter = createFFTFilter()\n\tFlangerFilter = createFlangerFilter()\n\tFreeverbFilter = createFreeverbFilter()\n\tLofiFilter = createLofiFilter()\n\tMonotone = createMonotone()\n\tNoise = createNoise()\n\tOpenmpt = createOpenmpt()\n\tQueue = createQueue()\n\tRobotizeFilter = createRobotizeFilter()\n\tSfxr = createSfxr()\n\tSpeech = createSpeech()\n\tTedSid = createTedSid()\n\tVic = createVic()\n\tVizsn = createVizsn()\n\tWav = createWav()\n\tWaveShaperFilter = createWaveShaperFilter()\n\tWavStream = createWavStream()\n\n\tsample = generateWaveform(waveform, value)\n'})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"CONSTANTS:"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'\tFILTERS_PER_STREAM, integer\n\tSAMPLE_GRANULARITY, integer\n\tVOICE_COUNT, integer\n\tMAX_CHANNELS, integer\n\tDEFAULT_RESAMPLER, string\n\n\t- FILTER ATTRIBUTE: (raw integers may also be used)\n\n\t\t"Filter.WET"\n\t\t"BassboostFilter.BOOST"\n\t\t"BiquadResonantFilter.TYPE"\n\t\t"BiquadResonantFilter.FREQUENCY"\n\t\t"BiquadResonantFilter.RESONANCE"\n\t\t"DuckFilter.ONRAMP"\n\t\t"DuckFilter.OFFRAMP"\n\t\t"DuckFilter.LEVEL"\n\t\t"EchoFilter.DELAY"\n\t\t"EchoFilter.DECAY"\n\t\t"EchoFilter.FILTER"\n\t\t"EqFilter.BAND1"\n\t\t"EqFilter.BAND2"\n\t\t"EqFilter.BAND3"\n\t\t"EqFilter.BAND4"\n\t\t"EqFilter.BAND5"\n\t\t"EqFilter.BAND6"\n\t\t"EqFilter.BAND7"\n\t\t"EqFilter.BAND8"\n\t\t"FlangerFilter.DELAY"\n\t\t"FlangerFilter.FREQ"\n\t\t"FreeverbFilter.FREEZE"\n\t\t"FreeverbFilter.ROOMSIZE"\n\t\t"FreeverbFilter.DAMP"\n\t\t"FreeverbFilter.WIDTH"\n\t\t"LofiFilter.SAMPLERATE"\n\t\t"LofiFilter.BITDEPTH"\n\t\t"RobotizeFilter.FREQ"\n\t\t"RobotizeFilter.WAVE"\n\t\t"WaveShaperFilter.AMOUNT"\n'})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"METHODS:"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'\t-- loadable_audio_source = any of Ay, Monotone, Openmpt, TedSid, Wav, WavStream\n\n\tok[, err] = loadable_audio_source:load(filename[, baseDir]) -- for Wav / WavStream: FLAC, MP3, Ogg Vorbis, WAV\n\tok[, err] = loadable_audio_source:loadFile(...) -- NYI (stub)\n\tok[, err] = loadable_audio_source:loadMem(bytes)\n\n\taudio_source:destroy()\n\t\n\tpoint = audio_source:getLoopPoint()\n\t\n\taudio_source:setAutoStop(stop) -- boolean\n\taudio_source:setFilter(index, filter / nil) -- 1-based, <= FILTERS_PER_STREAM\n\taudio_source:setInaudibleBehavior(must_tick, kill) -- booleans\n\taudio_source:setLooping(looping) -- boolean, loops indefinitely if true\n\taudio_source:setLooping(count) -- < 0 = loop indefinitely, 0 = no looping, > 0 = play that many times\n\taudio_source:setLoopPoint(point)\n\taudio_source:setSingleInstance(single) -- boolean\n\taudio_source:setVolume(volume)\n\taudio_source:set3dMinMaxDistance(min, max)\n\taudio_source:set3dAttenuation(model, rolloff)\n\taudio_source:set3dListenerRelative(relative) -- boolean\n\taudio_source:set3dDistanceDelay(delay) -- boolean\n\taudio_source:set3dCollider(...) -- NYI (stub)\n\taudio_source:set3dAttenuator(...) -- NYI (stub)\n\taudio_source:stop()\n\n\t-- bus_core = either Bus or core\n\n\tFloatBuffer = bus_core:calcFFT()\n\n\tcount = bus_core:getActiveVoiceCount()\n\tvolume = bus_core:getApproximateVolume(channel)\n\n\tFloatBuffer = bus_core:getWave()\n\n\thandle = bus_core:play(audio_source, opts)\n\t\n\t\tpan = number (default 0)\n\t\tpaused = boolean (default false)\n\t\tvolume = number (default -1... describe also)\n\t\tonComplete = function, cf. Queue:play()\n\n\thandle = bus_core:playClocked(time, audio_source, opts) -- per bus_core:play() (no paused)\n\thandle = bus_core:play3d(audio_source, x, y, z, opts)\n\t\n\t\topts per bus_core:play() (no pan), plus:\n\t\t\n\t\t\tvel_x, vel_y, vel_z : numbers (default 0)\n\t\t\t\n\thandle = bus_core:play3dClocked(time, audio_source, x, y, z, opts) -- per bus_core:play3d (no pan or paused)\n\n\tbus_core:setVisualizationEnable(enable) -- boolean\n\n\tBus:annexSound(voice)\n\t\n\tresampler = Bus:getResampler()\n\n\tBus:setChannels(count)\n\tBus:setResampler(resampler)\n\n\tMonotone:setParams(params)\n\t\n\t\thardwareChannels (integer)\n\t\twaveform (default "SQUARE")\n\n\tNoise:setOctaveScale(oct0, oct1, oct2, oct3, oct4, oct5, oct6, oct7, oct8, oct9) -- numbers\n\tNoise:setType(type) -- one of "WHITE", "PINK", "BROWNISH", "BLUEISH"\n\n\tcount = Queue:getQueueCount()\n\tis_playing = Queue:isCurrentlyPlaying(audio_source)\n\n\tok[, err] = Queue:play(opts)\n\t\n\t\tonComplete: optional, called as onComplete(event), with event.completed = true if the queue finished normally, false otherwise\n\n\tok[, err] = Queue:setParams(params)\n\t\n\t\tsampleRate, number\n\t\tchannels, integer (default 2)\n\n\tok[, err] = Queue:setParamsFromAudioSource(audio_source)\n\n\tok[, err] = Sfxr:loadParams(filename[, baseDir])\n\tok[, err] = Sfxr:loadParamsFile(...) -- NYI (stub)\n\tok[, err] = Sfxr:loadParamsMem(bytes)\n\tok[, err] = Sfxr:loadPreset(preset, seed) -- one of "COIN", "LASER", "EXPLOSION", "POWERUP", "HURT", "JUMP", "BLIP"\n\t\n\tSfxr:resetParams()\n\n\tok[, err] = Speech:setParams(params)\n\n\t\tbaseFrequency : integer, default 1330\n\t\tbaseSpeed : number, default 10\n\t\tbaseDeclination : number, default .5\n\t\tbaseWaveform : one of "SAW", "TRIANGLE" (default), "SIN", "SQUARE", "PULSE", "NOISE", "WARBLE"\n\n\tSpeech:setText(text)\n\n\tmodel = Vic:getModel() -- one of "PAL", "NTSC"\n\tvalue = Vic:getRegister(name) -- one of "BASS", "ALTO", "SOPRANO", "NOISE", returns integer\n\n\tVic:setModel(model) -- per getModel()\n\tVic:setRegister(name, value) -- per setRegister(), value clamped to 255\n\n\tVizsn:setText(text)\n\n\tlength = Wav:getLength()\n\n\tok[, err] = Wav:loadRawWave(bytes, opts) -- count = #bytes / sizeof(float), defaults will be current wav values\n\t\n\t\tcount (clamped if > byte count), channels: integer\n\t\tsampleRate : number\n\n\tok[, err] = Wav:loadRawWave8(bytes, opts) -- as per loadRawWave(), but count = #bytes\n\tok[, err] = Wav:loadRawWave16(bytes, opts) -- as per loadRawWave(), but count = #bytes / sizeof(uint16)\n\n\tlength = WavStream:getLength()\n\n\tok[, err] = WavStream:loadToMem(filename[, baseDir])\n\tok[, err] = WavStream:loadFileToMem(...) -- NYI (stub)\n\n\tfilter:destroy()\n\n\tcount = filter:getParamCount()\n\tmax = filter:getParamMax(index)\n\tmin = filter:getParamMin(index)\n\tname / nil = filter:getParamName(index)\n\tparam_type[, index_to_name_proxy] = filter:getParamType(index) -- some filters return a proxy for param_type "INT"\n\n\tname / nil = index_to_name_proxy[index]\n\n\tok[, err] = BassboostFilter:setParams(params)\n\t\n\t\tboost: number\n\n\tok[, err] = BiquadResonantFilter:setParams(params)\n\t\n\t\ttype: one of "LOWPASS", "HIGHPASS", "BANDPASS" (can find from index_to_name_proxy)\n\t\tfrequency, resonance: number\n\n\tok[, err] = DCRemovalFilter:setParams(opts)\n\t\n\t\tlength: number (default .1)\n\n\tok[, err] = DuckFilter:setParams(params)\n\t\n\t\tcore: COREAUDIO\n\t\tlistenTo: handle\n\t\tonRamp, offRamp, level: number (default .1, .5, .1)\n\n\tok[, err] = EchoFilter:setParams(params)\n\t\n\t\tdelay: number\n\t\tdecay, filter: number (default .7, 0)\n\n\tok[, err] = EQFilter:setParams(params)\n\t\n\t\tband = integer (1 - 8) or string of form "BAND?", where ? = 1 - 8\n\n\tok[, err] = FlangerFilter:setParams(params)\n\t\n\t\tdelay, frequency: numbers\n\t\n\tok[, err] = FreeverbFilter:setParams(params)\n\n\t\tmode: number (actually, seems to be "freeze" boolean...)\n\t\troomSize, damp, width: numbers\n\n\tok[, err] = LofiFilter:setParams(params)\n\t\n\t\tsampleRate, bitDepth: numbers\n\t\n\t\n\tok[, err] = RobotizeFilter:setParams(params)\n\t\n\t\tfrequency: number\n\t\twaveform (can find from index_to_name_proxy)\n\t\n\tok[, err] = WaveShaperFilter:setParams(params)\n\t\n\t\tamount: number\n\n\tok[, err] = core:addVoiceToGroup(group_handle, voice_handle)\n\t\n\tcount = core:countAudioSource(audio_source)\n\thandle = core:createVoiceGroup()\n\n\tcore:destroy()\n\n\tok[, err] = core:destroyVoiceGroup(handle)\n\n\tcore:fadeFilterParameter(handle, index, FILTER ATTRIBUTE, value, time)\n\tcore:fadeRelativePlaySpeed(handle, value, time)\n\tcore:fadePan(handle, value, time)\n\tcore:fadeVolume(handle, value, time)\n\n\tauto_stop = core:getAutoStop(handle) -- boolean\n\n\tparam = core:getFilterParameter(handle, index, FILTER_ATTRIBUTE) -- number\n\tvolume = core:getGlobalVolume()\n\tbuffer_size = core:getBackendBufferSize()\n\tchannels = core:getBackendChannels()\n\tid = core:getBackendId() -- integer\n\trate = core:getBackendSamplerate()\n\tstring / nil = core:getBackendString()\n\n\tinfo = core:getInfo(handle, key) -- key, info integers\n\tcount = core:getLoopCount(handle)\n\tlooping = core:getLooping(handle) -- boolean\n\tresampler = core:getMainResampler()\n\tcount = core:getMaxActiveVoiceCount()\n\tvolumne = core:getOverallVolume(handle)\n\tpan = core:getPan(handle)\n\tpaused = core:getPause(handle) -- boolean\n\tscaler = core:getPostClipScaler() -- number\n\tprotect = core:getProtectVoice(handle) -- boolean\n\tspeed = core:getRelativePlaySpeed(handle)\n\trate = core:getSamplerate(handle)\n\n\tok[, err / x, ][y, z] = core:getSpeakerPosition(index)\n\n\tpos = core:getStreamPosition(handle)\n\ttime = core:getStreamTime(handle)\n\n\tversion = core:getVersion() -- integer\n\tcount = core:getVoiceCount()\n\tvolume = core:getVolume(handle)\n\tspeed = core:get3dSoundSpeed()\n\tis_valid = core:isValidVoiceHandle(handle) -- boolean\n\tis_group = core:isVoiceGroup(handle) -- boolean\n\tis_empty = core:isVoiceGroupEmpty(handle) -- boolean\n\n\tok = core:mix(FloatBuffer, samples) -- by default, samples = floor(buffer size / channel count), must be >= 0 but less\n\tdata = core:mix(samples)\n\tdata = core:mixSigned16(samples)\n\n\tcore:oscillateFilterParameter(handle, index, FILTER_ATTRIBUTE, from, to, time)\n\tcore:oscillateGlobalVolume(from, to, time)\n\tcore:oscillatePan(handle, from, to, time)\n\tcore:oscillateRelativePlaySpeed(handle, from, to, time)\n\tcore:oscillateVolume(handle, from, to, time)\n\n\thandle = core:playBackground(opts) -- per bus_core:play(), has volume, paused, onComplete\n\n\tcore:schedulePause(handle, time)\n\tcore:scheduleStop(handle, time)\n\tcore:setAutoStop(handle, stop) -- boolean\n\tcore:setChannelVolume(handle, index, volume)\n\tcore:setDelaySamples(handle, samples)\n\tcore:setFilterParameter(handle, index, FILTER_ATTRIBUTE, value)\n\tcore:setGlobalFilter(index, filter / nil) -- index >= 1, < FILTERS_PER_STREAM\n\tcore:setGlobalVolume(volume)\n\tcore:setInaudibleBehavior(handle, must_tick, kill) -- booleans\n\n\tcore:setLooping(handle, loop) -- per audio_source:setLooping()\n\tcore:setLooping(handle, count)\n\n\tcore:setLoopPoint(point)\n\tcore:setMaxActiveVoiceCount(count)\n\tcore:setMainResampler(resampler)\n\tcore:setPan(handle, pan)\n\tcore:setPanAbsolute(handle, left_volume, right_volume)\n\tcore:setPause(handle, pause) -- boolean\n\tcore:setPauseAll(pause) -- boolean\n\tcore:setPostClipScaler(scaler) -- number\n\tcore:setProtectVoice(handle, protect) -- boolean\n\tcore:setRelativePlaySpeed(handle, speed)\n\tcore:setSamplerate(core, rate)\n\tcore:setSpeakerPosition(index, x, y, z)\n\tcore:setVolume(handle, volume)\n\tcore:set3dListenerAt(x, y, z)\n\n\tcore:set3dListenerParameters(px, py, pz, ax, ay, az, ux, uy, uz, opts) -- pos, at, up; opts can have vel_x, vel_y, vel_z (default 0)\n\tcore:set3dListenerPosition(x, y, z)\n\tcore:set3dListenerUp(x, y, z)\n\tcore:set3dListenerVelocity(x, y, z)\n\tcore:set3dSourceAttenuation(handle, model, rolloff)\n\tcore:set3dSourceDopplerFactor(factor)\n\tcore:set3dSourceMinMaxDistance(min, max)\n\tcore:set3dSourceParameters(handle, x, y, z, opts) -- opts as per set3dListenerParameters()\n\tcore:set3dSourcePosition(x, y, z)\n\tcore:set3dSourceVelocity(x, y, z)\n\n\tcore:stop(handle)\n\tcore:stopAll()\n\tcore:stopAudioSource(audio_source)\n\tcore:update3dAudio()\n'})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"PROPERTIES:"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"\tWav.SampleCount\n\tWavStream.SampleCount\n"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"CUSTOM SOURCE:"}),"\n",(0,o.jsx)(t.p,{children:"TODO"}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"CUSTOM SOURCE INSTANCE:"}),"\n",(0,o.jsx)(t.p,{children:"TODO"}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"CUSTOM FILTER:"}),"\n",(0,o.jsx)(t.p,{children:"TODO"}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"CUSTOM FILTER INSTANCE:"}),"\n",(0,o.jsx)(t.p,{children:"TODO"}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Audio thread:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"luaproc, MemoryBlob"}),"\n",(0,o.jsx)(t.li,{children:"Usable APIs, restrictions"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Openmpt:"}),"\n",(0,o.jsx)(t.p,{children:"As DLLs (plugins or main folder) or openmpt.zip in resources (Windows-only, at the moment)"}),"\n",(0,o.jsx)(t.p,{children:"^^ the wasmthing WIP has done something similar from a WASM+JS pair, albeit through OpenAL"}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>s});var o=n(6540);const r={},a=o.createContext(r);function l(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);