/**
   @license Copyright 2011 Maximilian Herkender

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

var lua_print = function () {
  try {
    console.log.apply(console, arguments);
  } catch (e) {
    // do nothing
  }
  return [];
};

function lua_load(chunk, chunkname) {
  if (!lua_parser) {
    throw new Error("Lua parser not available, perhaps you're not using the lua+parser.js version of the library?");
  }

  var fn;
  eval(
    "fn = function " + (chunkname || "load") + "() {\n" +
    "return (function () {\n" +
    lua_parser.parse(chunk) + "\n" +
    "})()[0];\n" +
    "};");
  return fn;
}

/* Jison generated parser */
var lua_parser = (function(){

var indentLevel = 0;
var blockId = 0;
var blockIdMax = 0;
var locals = {};
var stack = [];
var functionBlockAdded = false;
var inLoop = false;

function getLocal(name, alternative) {
  if (!locals[name]) {
    if (alternative) {
      return alternative;
    }
    locals[name] = "_" + name + "_" + blockId;
  }
  return locals[name];
}

function setLocal(name, localName) {
  return locals[name] = localName || "_" + name + "_" + blockId;
}

function setLocals(names) {
  var result = []
  for (var i = 0; i < names.length; i++) {
    result[i] = setLocal(names[i]);
  }
  return result;
}

function getTempDecl(explist) {
  if (explist.endmulti) {
    if (explist.exps.length > 1) {
      return "[" + explist.exps.slice(0, -1).join(", ") + "].concat(" + explist.endmulti + ")";
    } else {
      return explist.endmulti;
    }
  } else {
    return "[" + explist.exps.join(", ") + "]";
  }
}

function longStringToString(str) {
  return '"' + str.substring(0, str.length - 2).replace(/^\[\[(\r\n|\r|\n)?/m, "").replace(/\n/mg, "\\n").replace(/\r/mg, "\\r").replace(/\"/mg, "\\\"") + '"';
}

function createFunction(args, body, hasVarargs) {
  var result = "(function (" + args.join(", ") + ") {\n" +
    "  var tmp;\n";
  if (hasVarargs) {
    result += "  var varargs = slice(arguments, " + args.length + ");\n";
  }
  return result +
    body.simple_form + "\n" +
    "  return [];\n" +
    "})";
}

function getIfExp(exp) {
  return exp.simple_form || "lua_true(" + exp.single + ")";
}

function indentStatlist(statlist, laststat) {
  return "  " + ((statlist && laststat) ? statlist + "\n" + laststat : statlist + (laststat || "")).split("\n").join("\n  ");
}

function autoAssertFloat(possibleNumber) {
  return possibleNumber.is_number ? possibleNumber.single : "lua_assertfloat(" + possibleNumber.single + ")";
}

function autoFunctionBlock(loopblock) {
  return loopblock.use_function_block ?
    "(function() {\n" + loopblock.block + "\n})();" : "{\n" + loopblock.block + "\n}";
}

var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"script":3,"indent":4,"chunk":5,"unindent":6,"EOF":7,"funcindent":8,"funcunindent":9,"block":10,"loopblock":11,"setinloop":12,"semi":13,";":14,"statlist":15,"laststat":16,"prefixexp":17,"var":18,"functioncall":19,"(":20,"exp":21,")":22,"stat":23,"varlist":24,"=":25,"explist":26,"LOCAL":27,"namelist":28,"DO":29,"END":30,"WHILE":31,"REPEAT":32,"UNTIL":33,"IF":34,"conds":35,"FOR":36,"namelist_setlocals":37,",":38,"IN":39,"FUNCTION":40,"funcname":41,"funcbody":42,":":43,"NAME":44,"mfuncbody":45,"RETURN":46,"BREAK":47,"condlist":48,"ELSE":49,"cond":50,"ELSEIF":51,"THEN":52,"arglist":53,".":54,"NUMBER":55,"STRING":56,"TRUE":57,"FALSE":58,"tableconstructor":59,"NIL":60,"+":61,"-":62,"*":63,"/":64,"^":65,"%":66,"..":67,"<":68,">":69,"<=":70,">=":71,"==":72,"~=":73,"AND":74,"OR":75,"NOT":76,"#":77,"...":78,"{":79,"}":80,"fieldlist":81,"fieldsepend":82,"addself":83,"[":84,"]":85,"args":86,"field":87,"fieldsep":88,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",14:";",20:"(",22:")",25:"=",27:"LOCAL",29:"DO",30:"END",31:"WHILE",32:"REPEAT",33:"UNTIL",34:"IF",36:"FOR",38:",",39:"IN",40:"FUNCTION",43:":",44:"NAME",46:"RETURN",47:"BREAK",49:"ELSE",51:"ELSEIF",52:"THEN",54:".",55:"NUMBER",56:"STRING",57:"TRUE",58:"FALSE",60:"NIL",61:"+",62:"-",63:"*",64:"/",65:"^",66:"%",67:"..",68:"<",69:">",70:"<=",71:">=",72:"==",73:"~=",74:"AND",75:"OR",76:"NOT",77:"#",78:"...",79:"{",80:"}",84:"[",85:"]"},
productions_: [0,[3,4],[4,0],[6,0],[8,1],[9,1],[10,3],[11,4],[12,0],[13,1],[13,0],[5,1],[5,2],[17,1],[17,1],[17,3],[15,3],[15,0],[23,3],[23,4],[23,2],[23,1],[23,3],[23,5],[23,4],[23,3],[23,11],[23,13],[23,9],[23,3],[23,5],[23,4],[16,2],[16,1],[16,1],[35,1],[35,3],[48,1],[48,3],[50,3],[24,3],[24,1],[26,3],[26,1],[37,3],[37,1],[28,3],[28,1],[53,3],[53,1],[41,3],[41,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,2],[21,2],[21,1],[59,2],[59,4],[42,6],[42,7],[42,7],[42,9],[45,7],[45,8],[45,8],[45,10],[83,0],[18,1],[18,4],[18,3],[19,2],[19,4],[86,3],[86,2],[86,1],[86,1],[81,1],[81,3],[87,1],[87,3],[87,5],[88,1],[88,1],[82,1],[82,1],[82,0]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:
    return "var tmp;\n" +
      "var G = lua_newtable2(lua_core);\n" +
      "for (var i in lua_libs) {\n" +
      "  G.str[i] = lua_newtable2(lua_libs[i]);\n" +
      "}\n" +
      "G.str['arg'] = lua_newtable();\n" +
      "G.str['_G'] = G;\n" +
      "G.str['module'] = function (name) {\n" +
      "  lua_createmodule(G, name, slice(arguments, 1));\n" +
      "};\n" +
      "G.str['require'] = function (name) {\n" +
      "  lua_require(G, name);\n" +
      "};\n" +
      "G.str['package'].str['seeall'] = function (module) {\n" +
      "  if (!module.metatable) {\n" +
      "    module.metatable = lua_newtable();\n" +
      "  }\n" +
      "  module.metatable.str['__index'] = G;\n" +
      "};\n" +
	  	  "LuaBootStrap(G);\n"+ // added 2012-03 by ghoulsblade for love-webplayer
      "{\n" +
      $$[$0-2].simple_form + "\n" +
      "};\n" +
      "return [G];";
  
break;
case 2:
    var localsCopy = {}
    for (var i in locals) {
      localsCopy[i] = locals[i];
    }
    stack.push({locals: localsCopy, blockId: blockId, inLoop: inLoop});

    indentLevel++;
    blockIdMax++;
    this.$ = blockId = blockIdMax;
  
break;
case 3:
    var stackData = stack.pop();
    indentLevel--;
    locals = stackData.locals;
    inLoop = stackData.inLoop;
    if (!inLoop) {
      functionBlockAdded = false;
    }
    this.$ = blockId = stackData.blockId;
  
break;
case 4:
    functionBlockAdded = false;
    inLoop = false;
    this.$ = $$[$0];
  
break;
case 5:
    functionBlockAdded = true;
    this.$ = $$[$0];
  
break;
case 6: this.$ = $$[$0-1] 
break;
case 7:
    // if a function is declared inside of a loop, there are some differences
    // with how variables behave due to the difference in scoping in JS and Lua
    // by wrapping a loop block in a function call, we resolve these problems, but it
    // is only necessary for situations where functions are declared inside of a loop
    
    if (functionBlockAdded) {
      this.$ = {
        block: $$[$0-1].varfix_form || $$[$0-1].simple_form,
        use_function_block: true
      };
    } else {
      this.$ = {block: $$[$0-1].simple_form};
    }
  
break;
case 8: inLoop = true; 
break;
case 9: 
break;
case 10: 
break;
case 11:
    this.$ = {simple_form: indentStatlist($$[$0].simple_form)};
    if ($$[$0].varfix_form) {
      this.$.varfix_form = indentStatlist($$[$0].varfix_form);
    }
  
break;
case 12:
    this.$ = {simple_form: indentStatlist($$[$0-1].simple_form, $$[$0].simple_form)};
    if ($$[$0-1].varfix_form || $$[$0].varfix_form) {
      this.$.varfix_form = indentStatlist(
        $$[$0-1].varfix_form || $$[$0-1].simple_form, $$[$0].varfix_form || $$[$0].simple_form);
    }
  
break;
case 13:
    if ($$[$0].access) {
      this.$ = {single: "lua_tableget(" + $$[$0].prefixexp + ", " + $$[$0].access + ")", single_tableget: $$[$0]};
    } else {
      this.$ = {single: $$[$0].prefixexp};
    }
  
break;
case 14: this.$ = {single: $$[$0] + "[0]", endmulti: $$[$0]}; 
break;
case 15: this.$ = {single: "(" + $$[$0-1].single + ")", simple_form: $$[$0-1].simple_form}; 
break;
case 16:
    if ($$[$0].simple_form) {
      this.$ = {simple_form: $$[$0-2].simple_form + "\n" + $$[$0].simple_form};
      if ($$[$0-2].varfix_form || $$[$0].varfix_form) {
        this.$.varfix_form = ($$[$0-2].varfix_form || $$[$0-2].simple_form) + "\n" + ($$[$0].varfix_form || $$[$0].simple_form);
      }
    } else {
      this.$ = $$[$0-2];
    }
  
break;
case 17: this.$ = {simple_form: ""}; 
break;
case 18:
    var tmp;
    if ($$[$0-2].length == 1) {
      // avoid tmp entirely for certain situations
      if ($$[$0].exps.length == 1) {
        if ($$[$0-2][0].access) {
          tmp = "lua_tableset(" + $$[$0-2][0].prefixexp + ", " + $$[$0-2][0].access + ", " + $$[$0].exps[0] + ");";
        } else {
          tmp = $$[$0-2][0].prefixexp + " = " + $$[$0].exps[0] + ";";
        }
      } else {
        if ($$[$0-2][0].access) {
          tmp = "lua_tableset(" + $$[$0-2][0].prefixexp + ", " + $$[$0-2][0].access + ", " + getTempDecl($$[$0]) + "[0]);";
        } else {
          tmp = $$[$0-2][0].prefixexp + " = " + getTempDecl($$[$0]) + "[0];";
        }
      }
    } else {
      tmp = "tmp = " + getTempDecl($$[$0]) + "; ";
      for (var i = 0; i < $$[$0-2].length; i++) {
        if ($$[$0-2][i].access) {
          tmp += "lua_tableset(" + $$[$0-2][i].prefixexp + ", " + $$[$0-2][i].access + ", tmp[" + i + "]); ";
        } else {
          tmp += $$[$0-2][i].prefixexp + " = tmp[" + i + "]; ";
        }
      }
      tmp += "tmp = null;";
    }
    this.$ = {simple_form: tmp};
  
break;
case 19:
    var tmp;
    $$[$0-2] = setLocals($$[$0-2]);
    if ($$[$0-2].length == 1) {
      // avoid tmp entirely for certain situations
      if ($$[$0].exps.length == 1) {
        tmp = "var " + $$[$0-2][0] + " = " + $$[$0].exps[0] + ";";
      } else {
        tmp = "var " + $$[$0-2][0] + " = " + getTempDecl($$[$0]) + "[0];";
      }
    } else {
      tmp = "tmp = " + getTempDecl($$[$0]) + "; ";
      for (var i = 0; i < $$[$0-2].length; i++) {
        tmp += "var " + $$[$0-2][i] + " = tmp[" + i + "]; ";
      }
      tmp += "tmp = null;";
    }
    this.$ = {simple_form: tmp};
  
break;
case 20: this.$ = {simple_form: "var " + setLocals($$[$0]).join(", ") + ";"}; 
break;
case 21: this.$ = {simple_form: $$[$0] + ";"}; 
break;
case 22:
    this.$ = {simple_form: "// do\n" + $$[$0-1].simple_form + "\n// end"};
    if ($$[$0-1].varfix_form) {
      this.$.varfix_form = "// do\n" + $$[$0-1].varfix_form + "\n// end";
    }
  
break;
case 23: this.$ = {simple_form: "while (" + getIfExp($$[$0-3]) + ") " + autoFunctionBlock($$[$0-1])}; 
break;
case 24: this.$ = {simple_form: "do " + autoFunctionBlock($$[$0-2]) + " while (!(" + getIfExp($$[$0]) + "));"}; 
break;
case 25:
    this.$ = $$[$0-1]
  
break;
case 26:
    if ($$[$0-8].length != 1) {
      throw new Error("Only one value allowed in for..= loop");
    }
    if ($$[$0-2].use_function_block) {
      this.$ = {simple_form: "var var_" + $$[$0-9] + " = " + autoAssertFloat($$[$0-6]) + ", " +
        "stop_" + $$[$0-9] + " = " + autoAssertFloat($$[$0-4]) + ";\n" +
        "for (; var_" + $$[$0-9] + " <= stop_" + $$[$0-9] + "; var_" + $$[$0-9] + "++) (function() {\n" +
        "  var " + $$[$0-8][0] + " = var_" + $$[$0-9] + ";\n" +
        $$[$0-2].block + "\n" +
        "})();"};
    } else {
      this.$ = {simple_form: "var var_" + $$[$0-9] + " = " + autoAssertFloat($$[$0-6]) + ", " +
        "stop_" + $$[$0-9] + " = " + autoAssertFloat($$[$0-4]) + ";\n" +
        "for (; var_" + $$[$0-9] + " <= stop_" + $$[$0-9] + "; var_" + $$[$0-9] + "++) {\n" +
        "  var " + $$[$0-8][0] + " = var_" + $$[$0-9] + ";\n" +
        $$[$0-2].block +
        "\n}"};
    }
  
break;
case 27:
    if ($$[$0-10].length != 1) {
      throw new Error("Only one value allowed in for..= loop");
    }

    var tmp = "var var_" + $$[$0-11] + " = " + autoAssertFloat($$[$0-8]) + ", " +
      "stop_" + $$[$0-11] + " = " + autoAssertFloat($$[$0-6]) + ", " +
      "step_" + $$[$0-11] + " = " + autoAssertFloat($$[$0-4]) + ";\n" +
      "for (; step_" + $$[$0-11] + " > 0 ? var_" + $$[$0-11] + " <= stop_" + $$[$0-11] + " : var_" + $$[$0-11] + " >= stop_" + $$[$0-11] + "; var_" + $$[$0-11] + " += step_" + $$[$0-11] + ") ";
    if ($$[$0-2].use_function_block) {
      tmp += "(function () {\n";
    } else {
      tmp += "{\n";
    }
    tmp += "  var " + $$[$0-10][0] + " = var_" + $$[$0-11] + ";\n" +
        $$[$0-2].block + "\n";
    if ($$[$0-2].use_function_block) {
      tmp += "\n})();";
    } else {
      tmp += "\n}";
    }
    this.$ = {simple_form: tmp};
  
break;
case 28:
    var tmp;
    tmp = "tmp = " + getTempDecl($$[$0-4]) + ";\n" +
      "var f_" + $$[$0-7] + " = tmp[0], " +
      "s_" + $$[$0-7] + " = tmp[1], " +
      "var_" + $$[$0-7] + " = tmp[2];\n";

    if ($$[$0-6].length == 1 && !$$[$0-2].use_function_block) {
      // simple form of this loop that works in certain situations
      tmp += "tmp = null;\n" +
        "while ((var_" + $$[$0-7] + " = lua_call(f_" + $$[$0-7] + ", [s_" + $$[$0-7] + ", var_" + $$[$0-7] + "])[0]) != null) {\n" +
          "  var " + $$[$0-6][0] + " = var_" + $$[$0-7] + ";\n" +
          $$[$0-2].block +
          "\n}";
    } else {
      tmp += "while ((tmp = lua_call(f_" + $$[$0-7] + ", [s_" + $$[$0-7] + ", var_" + $$[$0-7] + "]))[0] != null) ";
      if ($$[$0-2].use_function_block) {
        tmp += "(function () {\n";
      } else {
        tmp += "{\n";
      }
      tmp += "  var_" + $$[$0-7] + " = tmp[0];\n" +
        "  var " + $$[$0-6][0] + " = var_" + $$[$0-7];
      for (var i = 1; i < $$[$0-6].length; i++) {
        tmp += ", " + $$[$0-6][i] + " = tmp[" + i + "]";
      }
      tmp += ";\n" +
        "  tmp = null;\n" +
        $$[$0-2].block + "\n";
      if ($$[$0-2].use_function_block) {
        tmp += "})();";
      } else {
        tmp += "}";
      }
      tmp += "\ntmp = null;";
    }
    this.$ = {simple_form: tmp};
  
break;
case 29:
    var tmp = getLocal($$[$0-1][0], "G.str['" + $$[$0-1][0] + "']");
    if ($$[$0-1].length > 1) {
      for (var i = 1; i < $$[$0-1].length - 1; i++) {
        tmp = "lua_tableget(" + tmp + ", '" + $$[$0-1][i] + "')";
      }
      this.$ = {simple_form: "lua_tableset(" + tmp + ", '" + $$[$0-1][i] + "', " + $$[$0] + ")"};
    } else {
      this.$ = {simple_form: tmp + " = " + $$[$0]};
    }
  
break;
case 30:
    var tmp = getLocal($$[$0-3][0], "G.str['" + $$[$0-3][0] + "']");
    for (var i = 1; i < $$[$0-3].length; i++) {
      tmp = "lua_tableget(" + tmp + ", '" + $$[$0-3][i] + "')";
    }
    this.$ = {simple_form: "lua_tableset(" + tmp + ", '" + $$[$0-1] + "', " + $$[$0] + ")"};
  
break;
case 31:
    this.$ = {simple_form: "var " + getLocal($$[$0-1]) + " = " + $$[$0] + ";"};
  
break;
case 32:
    this.$ = {
      simple_form: "return " + getTempDecl($$[$0]) + ";",
      varfix_form: "throw new ReturnValues(" + getTempDecl($$[$0]) + ");"
    };
  
break;
case 33:
    this.$ = {
      simple_form: "return [];",
      varfix_form: "throw new ReturnValues();"
    };
  
break;
case 34:
    this.$ = {
      simple_form: "break;",
      varfix_form: "return;"
    };
  
break;
case 35:
    this.$ = $$[$0];
  
break;
case 36:
    this.$ = {simple_form: $$[$0-2].simple_form + " else {\n" + $$[$0].simple_form + "\n}"};
    if ($$[$0-2].varfix_form || $$[$0].varfix_form) {
      this.$.varfix_form = ($$[$0-2].varfix_form || $$[$0-2].simple_form) + " else {\n" + ($$[$0].varfix_form || $$[$0].simple_form) + "\n}";
    }
  
break;
case 37:
    this.$ = $$[$0];
  
break;
case 38:
    this.$ = {simple_form: $$[$0-2].simple_form + " else " + $$[$0].simple_form};
    if ($$[$0-2].varfix_form || $$[$0].varfix_form) {
      this.$.varfix_form = ($$[$0-2].varfix_form || $$[$0-2].simple_form) + " else " + ($$[$0].varfix_form || $$[$0].simple_form)};
    
break;
case 39:
    this.$ = {simple_form: "if (" + getIfExp($$[$0-2]) + ") {\n" + $$[$0].simple_form + "\n}"};
    if ($$[$0].varfix_form) {
      this.$.varfix_form = "if (" + getIfExp($$[$0-2]) + ") {\n" + $$[$0].varfix_form + "\n}";
    }
  
break;
case 40: this.$ = $$[$0-2].concat([$$[$0]]); 
break;
case 41: this.$ = [$$[$0]]; 
break;
case 42: this.$ = {exps: $$[$0-2].exps.concat([$$[$0].single]), endmulti: $$[$0].endmulti}; 
break;
case 43: this.$ = {exps: [$$[$0].single], endmulti: $$[$0].endmulti}; 
break;
case 44: this.$ = $$[$0-2].concat([setLocal($$[$0])]); 
break;
case 45: this.$ = [setLocal($$[$0])]; 
break;
case 46: this.$ = $$[$0-2].concat([$$[$0]]); 
break;
case 47: this.$ = [$$[$0]]; 
break;
case 48: this.$ = $$[$0-2].concat([setLocal($$[$0], "_" + $$[$0])]); 
break;
case 49: this.$ = [setLocal($$[$0], "_" + $$[$0])]; 
break;
case 50: this.$ = $$[$0-2].concat([$$[$0]]); 
break;
case 51: this.$ = [$$[$0]]; 
break;
case 52: this.$ = {single: $$[$0], is_number: true}; 
break;
case 53: this.$ = {single: $$[$0]}; 
break;
case 54: this.$ = {single: 'true', simple_form: 'true'}; 
break;
case 55: this.$ = {single: 'false', simple_form: 'false'}; 
break;
case 56: this.$ = {single: $$[$0]}; 
break;
case 57: this.$ = {single: 'null', simple_form: 'null'}; 
break;
case 58: this.$ = $$[$0]; 
break;
case 59:
    this.$ = {single: $$[$0]};
  
break;
case 60: this.$ = {single: 'lua_add(' + $$[$0-2].single + ', ' + $$[$0].single + ')'}; 
break;
case 61: this.$ = {single: 'lua_subtract(' + $$[$0-2].single + ', ' + $$[$0].single + ')'}; 
break;
case 62: this.$ = {single: 'lua_multiply(' + $$[$0-2].single + ', ' + $$[$0].single + ')'}; 
break;
case 63: this.$ = {single: 'lua_divide(' + $$[$0-2].single + ', ' + $$[$0].single + ')'}; 
break;
case 64: this.$ = {single: 'lua_power(' + $$[$0-2].single + ', ' + $$[$0].single + ')'}; 
break;
case 65: this.$ = {single: 'lua_mod(' + $$[$0-2].single + ', ' + $$[$0].single + ')'}; 
break;
case 66: this.$ = {single: 'lua_concat(' + $$[$0-2].single + ', ' + $$[$0].single + ')'}; 
break;
case 67:
    this.$ = {
      single: 'lua_lt(' + $$[$0-2].single + ', ' + $$[$0].single + ')',
      simple_form: 'lua_lt(' + $$[$0-2].single + ', ' + $$[$0].single + ')'
    };
  
break;
case 68:
    this.$ = {
      single: 'lua_lt(' + $$[$0].single + ', ' + $$[$0-2].single + ')',
      simple_form: 'lua_lt(' + $$[$0].single + ', ' + $$[$0-2].single + ')'
    };
  
break;
case 69:
    this.$ = {
      single: 'lua_lte(' + $$[$0-2].single + ', ' + $$[$0].single + ')',
      simple_form: 'lua_lte(' + $$[$0-2].single + ', ' + $$[$0].single + ')'
    };
  
break;
case 70:
    this.$ = {
      single: 'lua_lte(' + $$[$0].single + ', ' + $$[$0-2].single + ')',
      simple_form: 'lua_lte(' + $$[$0].single + ', ' + $$[$0-2].single + ')'
    };
  
break;
case 71:
    this.$ = {
      single: 'lua_eq(' + $$[$0-2].single + ', ' + $$[$0].single + ')',
      simple_form: 'lua_eq(' + $$[$0-2].single + ', ' + $$[$0].single + ')'
    };
  
break;
case 72:
    this.$ = {
      single: '!lua_eq(' + $$[$0-2].single + ', ' + $$[$0].single + ')',
      simple_form: '!lua_eq(' + $$[$0-2].single + ', ' + $$[$0].single + ')'
    };
  
break;
case 73:
    this.$ = {
      single: 'lua_and(' + $$[$0-2].single + ', function () {return ' + $$[$0].single + ';})',
      simple_form: '(' + getIfExp($$[$0-2]) + ' && ' + getIfExp($$[$0]) + ')'
    };
  
break;
case 74:
    this.$ = {
      single: 'lua_or(' + $$[$0-2].single + ', function () {return ' + $$[$0].single + ';})',
      simple_form: '(' + getIfExp($$[$0-2]) + ' || ' + getIfExp($$[$0]) + ')'
    };
  
break;
case 75: this.$ = {single: $$[$0].is_number ? ('-' + $$[$0].single) : ('lua_unm(' + $$[$0].single + ')')}; 
break;
case 76:
    this.$ = {
      single: 'lua_not(' + $$[$0].single + ')',
      simple_form: 'lua_not(' + $$[$0].single + ')'
    };
  
break;
case 77: this.$ = {single: 'lua_len(' + $$[$0].single + ')'}; 
break;
case 78: this.$ = {single: 'varargs[0]', endmulti: 'varargs'}; 
break;
case 79: this.$ = "lua_newtable()"; 
break;
case 80:
    this.$ = "lua_newtable(" + getTempDecl($$[$0-2]);
    if ($$[$0-2].keyed) {
      for (var i in $$[$0-2].keyed) {
        this.$ += ", " + $$[$0-2].keyed[i][0] + ", " + $$[$0-2].keyed[i][1];
      }
    }
    this.$ += ")";
  
break;
case 81: this.$ = createFunction([], $$[$0-2]); 
break;
case 82: this.$ = createFunction($$[$0-4], $$[$0-2]); 
break;
case 83: this.$ = createFunction([], $$[$0-2], true); 
break;
case 84: this.$ = createFunction($$[$0-6], $$[$0-2], true); 
break;
case 85: this.$ = createFunction(["self"], $$[$0-2]); 
break;
case 86: this.$ = createFunction(["self"].concat($$[$0-4]), $$[$0-2]); 
break;
case 87: this.$ = createFunction(["self"], $$[$0-2], true); 
break;
case 88: this.$ = createFunction(["self"].concat($$[$0-6]), $$[$0-2], true); 
break;
case 89: setLocal("self", "self") 
break;
case 90: this.$ = {prefixexp: getLocal($$[$0], "G.str['" + $$[$0] + "']")}; 
break;
case 91: this.$ = {prefixexp: $$[$0-3].single, access: $$[$0-1].single}; 
break;
case 92: this.$ = {prefixexp: $$[$0-2].single, access: "'" + $$[$0] + "'"}; 
break;
case 93:
    if ($$[$0-1].single_tableget) {
      this.$ = "lua_tablegetcall(" + $$[$0-1].single_tableget.prefixexp + ", " + $$[$0-1].single_tableget.access + ", " + getTempDecl($$[$0]) + ")";
    } else {
      this.$ = "lua_call(" + $$[$0-1].single + ", " + getTempDecl($$[$0]) + ")";
    }
  
break;
case 94: this.$ = "lua_mcall(" + $$[$0-3].single + ", '" + $$[$0-1] + "', " + getTempDecl($$[$0]) + ")"; 
break;
case 95: this.$ = $$[$0-1]; 
break;
case 96: this.$ = {exps: []}; 
break;
case 97: this.$ = {exps: [$$[$0]]}; 
break;
case 98: this.$ = {exps: [$$[$0]]}; 
break;
case 99: this.$ = $$[$0]; 
break;
case 100:
    this.$ = {
      keyed: $$[$0-2].keyed.concat($$[$0].keyed),
      exps: $$[$0-2].exps.concat($$[$0].exps),
      endmulti: $$[$0].endmulti
    };
  
break;
case 101: this.$ = {keyed: [], exps: [$$[$0].single], endmulti: $$[$0].endmulti}; 
break;
case 102: this.$ = {keyed: [["'" + $$[$0-2] + "'", $$[$0].single]], exps: []}; 
break;
case 103: this.$ = {keyed: [[$$[$0-3].single, $$[$0].single]], exps: []}; 
break;
case 104: 
break;
case 105: 
break;
case 106: 
break;
case 107: 
break;
}
},
table: [{3:1,4:2,7:[2,2],20:[2,2],27:[2,2],29:[2,2],31:[2,2],32:[2,2],34:[2,2],36:[2,2],40:[2,2],44:[2,2],46:[2,2],47:[2,2]},{1:[3]},{5:3,7:[2,17],15:4,17:16,18:15,19:8,20:[1,18],23:5,24:6,27:[1,7],29:[1,9],31:[1,10],32:[1,11],34:[1,12],36:[1,13],40:[1,14],44:[1,17],46:[2,17],47:[2,17]},{6:19,7:[2,3]},{7:[2,11],16:20,30:[2,11],33:[2,11],46:[1,21],47:[1,22],49:[2,11],51:[2,11]},{7:[2,10],13:23,14:[1,24],20:[2,10],27:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[2,10],33:[2,10],34:[2,10],36:[2,10],40:[2,10],44:[2,10],46:[2,10],47:[2,10],49:[2,10],51:[2,10]},{25:[1,25],38:[1,26]},{28:27,40:[1,28],44:[1,29]},{7:[2,21],14:[2,21],20:[2,21],27:[2,21],29:[2,21],30:[2,21],31:[2,21],32:[2,21],33:[2,21],34:[2,21],36:[2,21],40:[2,21],43:[2,21],44:[2,21],46:[2,21],47:[2,21],49:[2,21],51:[2,21],54:[2,21],56:[2,21],79:[2,21],84:[2,21]},{4:31,10:30,20:[2,2],27:[2,2],29:[2,2],30:[2,2],31:[2,2],32:[2,2],34:[2,2],36:[2,2],40:[2,2],44:[2,2],46:[2,2],47:[2,2]},{17:39,18:46,19:47,20:[1,18],21:32,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{11:48,12:49,20:[2,8],27:[2,8],29:[2,8],31:[2,8],32:[2,8],33:[2,8],34:[2,8],36:[2,8],40:[2,8],44:[2,8],46:[2,8],47:[2,8]},{17:39,18:46,19:47,20:[1,18],21:53,35:50,40:[1,40],44:[1,17],48:51,50:52,55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{4:54,44:[2,2]},{41:55,44:[1,56]},{20:[2,41],25:[2,41],38:[2,41],43:[2,41],54:[2,41],56:[2,41],79:[2,41],84:[2,41]},{20:[1,61],43:[1,58],54:[1,60],56:[1,63],59:62,79:[1,45],84:[1,59],86:57},{7:[2,90],14:[2,90],20:[2,90],22:[2,90],25:[2,90],27:[2,90],29:[2,90],30:[2,90],31:[2,90],32:[2,90],33:[2,90],34:[2,90],36:[2,90],38:[2,90],40:[2,90],43:[2,90],44:[2,90],46:[2,90],47:[2,90],49:[2,90],51:[2,90],52:[2,90],54:[2,90],56:[2,90],61:[2,90],62:[2,90],63:[2,90],64:[2,90],65:[2,90],66:[2,90],67:[2,90],68:[2,90],69:[2,90],70:[2,90],71:[2,90],72:[2,90],73:[2,90],74:[2,90],75:[2,90],79:[2,90],80:[2,90],84:[2,90],85:[2,90]},{17:39,18:46,19:47,20:[1,18],21:64,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{7:[1,65]},{7:[2,12],30:[2,12],33:[2,12],49:[2,12],51:[2,12]},{7:[2,33],17:39,18:46,19:47,20:[1,18],21:67,26:66,30:[2,33],33:[2,33],40:[1,40],44:[1,17],49:[2,33],51:[2,33],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{7:[2,34],30:[2,34],33:[2,34],49:[2,34],51:[2,34]},{7:[2,17],15:68,17:16,18:15,19:8,20:[1,18],23:5,24:6,27:[1,7],29:[1,9],30:[2,17],31:[1,10],32:[1,11],33:[2,17],34:[1,12],36:[1,13],40:[1,14],44:[1,17],46:[2,17],47:[2,17],49:[2,17],51:[2,17]},{7:[2,9],20:[2,9],27:[2,9],29:[2,9],30:[2,9],31:[2,9],32:[2,9],33:[2,9],34:[2,9],36:[2,9],40:[2,9],44:[2,9],46:[2,9],47:[2,9],49:[2,9],51:[2,9]},{17:39,18:46,19:47,20:[1,18],21:67,26:69,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:16,18:70,19:47,20:[1,18],44:[1,17]},{7:[2,20],14:[2,20],20:[2,20],25:[1,71],27:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[2,20],33:[2,20],34:[2,20],36:[2,20],38:[1,72],40:[2,20],44:[2,20],46:[2,20],47:[2,20],49:[2,20],51:[2,20]},{44:[1,73]},{7:[2,47],14:[2,47],20:[2,47],25:[2,47],27:[2,47],29:[2,47],30:[2,47],31:[2,47],32:[2,47],33:[2,47],34:[2,47],36:[2,47],38:[2,47],40:[2,47],44:[2,47],46:[2,47],47:[2,47],49:[2,47],51:[2,47]},{30:[1,74]},{5:75,15:4,17:16,18:15,19:8,20:[1,18],23:5,24:6,27:[1,7],29:[1,9],30:[2,17],31:[1,10],32:[1,11],34:[1,12],36:[1,13],40:[1,14],44:[1,17],46:[2,17],47:[2,17],49:[2,17],51:[2,17]},{29:[1,76],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91]},{7:[2,52],14:[2,52],20:[2,52],22:[2,52],27:[2,52],29:[2,52],30:[2,52],31:[2,52],32:[2,52],33:[2,52],34:[2,52],36:[2,52],38:[2,52],40:[2,52],44:[2,52],46:[2,52],47:[2,52],49:[2,52],51:[2,52],52:[2,52],61:[2,52],62:[2,52],63:[2,52],64:[2,52],65:[2,52],66:[2,52],67:[2,52],68:[2,52],69:[2,52],70:[2,52],71:[2,52],72:[2,52],73:[2,52],74:[2,52],75:[2,52],80:[2,52],85:[2,52]},{7:[2,53],14:[2,53],20:[2,53],22:[2,53],27:[2,53],29:[2,53],30:[2,53],31:[2,53],32:[2,53],33:[2,53],34:[2,53],36:[2,53],38:[2,53],40:[2,53],44:[2,53],46:[2,53],47:[2,53],49:[2,53],51:[2,53],52:[2,53],61:[2,53],62:[2,53],63:[2,53],64:[2,53],65:[2,53],66:[2,53],67:[2,53],68:[2,53],69:[2,53],70:[2,53],71:[2,53],72:[2,53],73:[2,53],74:[2,53],75:[2,53],80:[2,53],85:[2,53]},{7:[2,54],14:[2,54],20:[2,54],22:[2,54],27:[2,54],29:[2,54],30:[2,54],31:[2,54],32:[2,54],33:[2,54],34:[2,54],36:[2,54],38:[2,54],40:[2,54],44:[2,54],46:[2,54],47:[2,54],49:[2,54],51:[2,54],52:[2,54],61:[2,54],62:[2,54],63:[2,54],64:[2,54],65:[2,54],66:[2,54],67:[2,54],68:[2,54],69:[2,54],70:[2,54],71:[2,54],72:[2,54],73:[2,54],74:[2,54],75:[2,54],80:[2,54],85:[2,54]},{7:[2,55],14:[2,55],20:[2,55],22:[2,55],27:[2,55],29:[2,55],30:[2,55],31:[2,55],32:[2,55],33:[2,55],34:[2,55],36:[2,55],38:[2,55],40:[2,55],44:[2,55],46:[2,55],47:[2,55],49:[2,55],51:[2,55],52:[2,55],61:[2,55],62:[2,55],63:[2,55],64:[2,55],65:[2,55],66:[2,55],67:[2,55],68:[2,55],69:[2,55],70:[2,55],71:[2,55],72:[2,55],73:[2,55],74:[2,55],75:[2,55],80:[2,55],85:[2,55]},{7:[2,56],14:[2,56],20:[2,56],22:[2,56],27:[2,56],29:[2,56],30:[2,56],31:[2,56],32:[2,56],33:[2,56],34:[2,56],36:[2,56],38:[2,56],40:[2,56],44:[2,56],46:[2,56],47:[2,56],49:[2,56],51:[2,56],52:[2,56],61:[2,56],62:[2,56],63:[2,56],64:[2,56],65:[2,56],66:[2,56],67:[2,56],68:[2,56],69:[2,56],70:[2,56],71:[2,56],72:[2,56],73:[2,56],74:[2,56],75:[2,56],80:[2,56],85:[2,56]},{7:[2,57],14:[2,57],20:[2,57],22:[2,57],27:[2,57],29:[2,57],30:[2,57],31:[2,57],32:[2,57],33:[2,57],34:[2,57],36:[2,57],38:[2,57],40:[2,57],44:[2,57],46:[2,57],47:[2,57],49:[2,57],51:[2,57],52:[2,57],61:[2,57],62:[2,57],63:[2,57],64:[2,57],65:[2,57],66:[2,57],67:[2,57],68:[2,57],69:[2,57],70:[2,57],71:[2,57],72:[2,57],73:[2,57],74:[2,57],75:[2,57],80:[2,57],85:[2,57]},{7:[2,58],14:[2,58],20:[1,61],22:[2,58],27:[2,58],29:[2,58],30:[2,58],31:[2,58],32:[2,58],33:[2,58],34:[2,58],36:[2,58],38:[2,58],40:[2,58],43:[1,58],44:[2,58],46:[2,58],47:[2,58],49:[2,58],51:[2,58],52:[2,58],54:[1,60],56:[1,63],59:62,61:[2,58],62:[2,58],63:[2,58],64:[2,58],65:[2,58],66:[2,58],67:[2,58],68:[2,58],69:[2,58],70:[2,58],71:[2,58],72:[2,58],73:[2,58],74:[2,58],75:[2,58],79:[1,45],80:[2,58],84:[1,59],85:[2,58],86:57},{4:94,8:93,20:[2,2],42:92},{17:39,18:46,19:47,20:[1,18],21:95,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:96,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:97,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{7:[2,78],14:[2,78],20:[2,78],22:[2,78],27:[2,78],29:[2,78],30:[2,78],31:[2,78],32:[2,78],33:[2,78],34:[2,78],36:[2,78],38:[2,78],40:[2,78],44:[2,78],46:[2,78],47:[2,78],49:[2,78],51:[2,78],52:[2,78],61:[2,78],62:[2,78],63:[2,78],64:[2,78],65:[2,78],66:[2,78],67:[2,78],68:[2,78],69:[2,78],70:[2,78],71:[2,78],72:[2,78],73:[2,78],74:[2,78],75:[2,78],80:[2,78],85:[2,78]},{17:39,18:46,19:47,20:[1,18],21:101,40:[1,40],44:[1,102],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45],80:[1,98],81:99,84:[1,103],87:100},{7:[2,13],14:[2,13],20:[2,13],22:[2,13],27:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[2,13],33:[2,13],34:[2,13],36:[2,13],38:[2,13],40:[2,13],43:[2,13],44:[2,13],46:[2,13],47:[2,13],49:[2,13],51:[2,13],52:[2,13],54:[2,13],56:[2,13],61:[2,13],62:[2,13],63:[2,13],64:[2,13],65:[2,13],66:[2,13],67:[2,13],68:[2,13],69:[2,13],70:[2,13],71:[2,13],72:[2,13],73:[2,13],74:[2,13],75:[2,13],79:[2,13],80:[2,13],84:[2,13],85:[2,13]},{7:[2,14],14:[2,14],20:[2,14],22:[2,14],27:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],33:[2,14],34:[2,14],36:[2,14],38:[2,14],40:[2,14],43:[2,14],44:[2,14],46:[2,14],47:[2,14],49:[2,14],51:[2,14],52:[2,14],54:[2,14],56:[2,14],61:[2,14],62:[2,14],63:[2,14],64:[2,14],65:[2,14],66:[2,14],67:[2,14],68:[2,14],69:[2,14],70:[2,14],71:[2,14],72:[2,14],73:[2,14],74:[2,14],75:[2,14],79:[2,14],80:[2,14],84:[2,14],85:[2,14]},{33:[1,104]},{4:105,20:[2,2],27:[2,2],29:[2,2],30:[2,2],31:[2,2],32:[2,2],33:[2,2],34:[2,2],36:[2,2],40:[2,2],44:[2,2],46:[2,2],47:[2,2]},{30:[1,106]},{30:[2,35],49:[1,107],51:[1,108]},{30:[2,37],49:[2,37],51:[2,37]},{52:[1,109],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91]},{37:110,44:[1,111]},{4:94,8:93,20:[2,2],42:112,43:[1,113],54:[1,114]},{20:[2,51],43:[2,51],54:[2,51]},{7:[2,93],14:[2,93],20:[2,93],22:[2,93],27:[2,93],29:[2,93],30:[2,93],31:[2,93],32:[2,93],33:[2,93],34:[2,93],36:[2,93],38:[2,93],40:[2,93],43:[2,93],44:[2,93],46:[2,93],47:[2,93],49:[2,93],51:[2,93],52:[2,93],54:[2,93],56:[2,93],61:[2,93],62:[2,93],63:[2,93],64:[2,93],65:[2,93],66:[2,93],67:[2,93],68:[2,93],69:[2,93],70:[2,93],71:[2,93],72:[2,93],73:[2,93],74:[2,93],75:[2,93],79:[2,93],80:[2,93],84:[2,93],85:[2,93]},{44:[1,115]},{17:39,18:46,19:47,20:[1,18],21:116,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{44:[1,117]},{17:39,18:46,19:47,20:[1,18],21:67,22:[1,119],26:118,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{7:[2,97],14:[2,97],20:[2,97],22:[2,97],27:[2,97],29:[2,97],30:[2,97],31:[2,97],32:[2,97],33:[2,97],34:[2,97],36:[2,97],38:[2,97],40:[2,97],43:[2,97],44:[2,97],46:[2,97],47:[2,97],49:[2,97],51:[2,97],52:[2,97],54:[2,97],56:[2,97],61:[2,97],62:[2,97],63:[2,97],64:[2,97],65:[2,97],66:[2,97],67:[2,97],68:[2,97],69:[2,97],70:[2,97],71:[2,97],72:[2,97],73:[2,97],74:[2,97],75:[2,97],79:[2,97],80:[2,97],84:[2,97],85:[2,97]},{7:[2,98],14:[2,98],20:[2,98],22:[2,98],27:[2,98],29:[2,98],30:[2,98],31:[2,98],32:[2,98],33:[2,98],34:[2,98],36:[2,98],38:[2,98],40:[2,98],43:[2,98],44:[2,98],46:[2,98],47:[2,98],49:[2,98],51:[2,98],52:[2,98],54:[2,98],56:[2,98],61:[2,98],62:[2,98],63:[2,98],64:[2,98],65:[2,98],66:[2,98],67:[2,98],68:[2,98],69:[2,98],70:[2,98],71:[2,98],72:[2,98],73:[2,98],74:[2,98],75:[2,98],79:[2,98],80:[2,98],84:[2,98],85:[2,98]},{22:[1,120],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91]},{1:[2,1]},{7:[2,32],30:[2,32],33:[2,32],38:[1,121],49:[2,32],51:[2,32]},{7:[2,43],14:[2,43],20:[2,43],22:[2,43],27:[2,43],29:[2,43],30:[2,43],31:[2,43],32:[2,43],33:[2,43],34:[2,43],36:[2,43],38:[2,43],40:[2,43],44:[2,43],46:[2,43],47:[2,43],49:[2,43],51:[2,43],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91]},{7:[2,16],30:[2,16],33:[2,16],46:[2,16],47:[2,16],49:[2,16],51:[2,16]},{7:[2,18],14:[2,18],20:[2,18],27:[2,18],29:[2,18],30:[2,18],31:[2,18],32:[2,18],33:[2,18],34:[2,18],36:[2,18],38:[1,121],40:[2,18],44:[2,18],46:[2,18],47:[2,18],49:[2,18],51:[2,18]},{20:[2,13],25:[2,40],38:[2,40],43:[2,13],54:[2,13],56:[2,13],79:[2,13],84:[2,13]},{17:39,18:46,19:47,20:[1,18],21:67,26:122,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{44:[1,123]},{4:94,8:93,20:[2,2],42:124},{7:[2,22],14:[2,22],20:[2,22],27:[2,22],29:[2,22],30:[2,22],31:[2,22],32:[2,22],33:[2,22],34:[2,22],36:[2,22],40:[2,22],44:[2,22],46:[2,22],47:[2,22],49:[2,22],51:[2,22]},{6:125,30:[2,3],49:[2,3],51:[2,3]},{11:126,12:49,20:[2,8],27:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],34:[2,8],36:[2,8],40:[2,8],44:[2,8],46:[2,8],47:[2,8]},{17:39,18:46,19:47,20:[1,18],21:127,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:128,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:129,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:130,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:131,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:132,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:133,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:134,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:135,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:136,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:137,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:138,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:139,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:140,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:141,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{7:[2,59],14:[2,59],20:[2,59],22:[2,59],27:[2,59],29:[2,59],30:[2,59],31:[2,59],32:[2,59],33:[2,59],34:[2,59],36:[2,59],38:[2,59],40:[2,59],44:[2,59],46:[2,59],47:[2,59],49:[2,59],51:[2,59],52:[2,59],61:[2,59],62:[2,59],63:[2,59],64:[2,59],65:[2,59],66:[2,59],67:[2,59],68:[2,59],69:[2,59],70:[2,59],71:[2,59],72:[2,59],73:[2,59],74:[2,59],75:[2,59],80:[2,59],85:[2,59]},{20:[1,142]},{20:[2,4]},{7:[2,75],14:[2,75],20:[2,75],22:[2,75],27:[2,75],29:[2,75],30:[2,75],31:[2,75],32:[2,75],33:[2,75],34:[2,75],36:[2,75],38:[2,75],40:[2,75],44:[2,75],46:[2,75],47:[2,75],49:[2,75],51:[2,75],52:[2,75],61:[2,75],62:[2,75],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[2,75],68:[2,75],69:[2,75],70:[2,75],71:[2,75],72:[2,75],73:[2,75],74:[2,75],75:[2,75],80:[2,75],85:[2,75]},{7:[2,76],14:[2,76],20:[2,76],22:[2,76],27:[2,76],29:[2,76],30:[2,76],31:[2,76],32:[2,76],33:[2,76],34:[2,76],36:[2,76],38:[2,76],40:[2,76],44:[2,76],46:[2,76],47:[2,76],49:[2,76],51:[2,76],52:[2,76],61:[2,76],62:[2,76],63:[2,76],64:[2,76],65:[1,81],66:[2,76],67:[2,76],68:[2,76],69:[2,76],70:[2,76],71:[2,76],72:[2,76],73:[2,76],74:[2,76],75:[2,76],80:[2,76],85:[2,76]},{7:[2,77],14:[2,77],20:[2,77],22:[2,77],27:[2,77],29:[2,77],30:[2,77],31:[2,77],32:[2,77],33:[2,77],34:[2,77],36:[2,77],38:[2,77],40:[2,77],44:[2,77],46:[2,77],47:[2,77],49:[2,77],51:[2,77],52:[2,77],61:[2,77],62:[2,77],63:[2,77],64:[2,77],65:[1,81],66:[2,77],67:[2,77],68:[2,77],69:[2,77],70:[2,77],71:[2,77],72:[2,77],73:[2,77],74:[2,77],75:[2,77],80:[2,77],85:[2,77]},{7:[2,79],14:[2,79],20:[2,79],22:[2,79],27:[2,79],29:[2,79],30:[2,79],31:[2,79],32:[2,79],33:[2,79],34:[2,79],36:[2,79],38:[2,79],40:[2,79],43:[2,79],44:[2,79],46:[2,79],47:[2,79],49:[2,79],51:[2,79],52:[2,79],54:[2,79],56:[2,79],61:[2,79],62:[2,79],63:[2,79],64:[2,79],65:[2,79],66:[2,79],67:[2,79],68:[2,79],69:[2,79],70:[2,79],71:[2,79],72:[2,79],73:[2,79],74:[2,79],75:[2,79],79:[2,79],80:[2,79],84:[2,79],85:[2,79]},{14:[1,145],38:[1,146],80:[2,108],82:143,88:144},{14:[2,99],38:[2,99],80:[2,99]},{14:[2,101],38:[2,101],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91],80:[2,101]},{14:[2,90],20:[2,90],25:[1,147],38:[2,90],43:[2,90],54:[2,90],56:[2,90],61:[2,90],62:[2,90],63:[2,90],64:[2,90],65:[2,90],66:[2,90],67:[2,90],68:[2,90],69:[2,90],70:[2,90],71:[2,90],72:[2,90],73:[2,90],74:[2,90],75:[2,90],79:[2,90],80:[2,90],84:[2,90]},{17:39,18:46,19:47,20:[1,18],21:148,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:149,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{5:150,15:4,17:16,18:15,19:8,20:[1,18],23:5,24:6,27:[1,7],29:[1,9],30:[2,17],31:[1,10],32:[1,11],33:[2,17],34:[1,12],36:[1,13],40:[1,14],44:[1,17],46:[2,17],47:[2,17]},{7:[2,25],14:[2,25],20:[2,25],27:[2,25],29:[2,25],30:[2,25],31:[2,25],32:[2,25],33:[2,25],34:[2,25],36:[2,25],40:[2,25],44:[2,25],46:[2,25],47:[2,25],49:[2,25],51:[2,25]},{4:31,10:151,20:[2,2],27:[2,2],29:[2,2],30:[2,2],31:[2,2],32:[2,2],34:[2,2],36:[2,2],40:[2,2],44:[2,2],46:[2,2],47:[2,2]},{17:39,18:46,19:47,20:[1,18],21:53,40:[1,40],44:[1,17],50:152,55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{4:31,10:153,20:[2,2],27:[2,2],29:[2,2],30:[2,2],31:[2,2],32:[2,2],34:[2,2],36:[2,2],40:[2,2],44:[2,2],46:[2,2],47:[2,2],49:[2,2],51:[2,2]},{25:[1,154],38:[1,156],39:[1,155]},{25:[2,45],38:[2,45],39:[2,45]},{7:[2,29],14:[2,29],20:[2,29],27:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29],36:[2,29],40:[2,29],44:[2,29],46:[2,29],47:[2,29],49:[2,29],51:[2,29]},{44:[1,157]},{44:[1,158]},{20:[1,61],56:[1,63],59:62,79:[1,45],86:159},{61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91],85:[1,160]},{7:[2,92],14:[2,92],20:[2,92],22:[2,92],25:[2,92],27:[2,92],29:[2,92],30:[2,92],31:[2,92],32:[2,92],33:[2,92],34:[2,92],36:[2,92],38:[2,92],40:[2,92],43:[2,92],44:[2,92],46:[2,92],47:[2,92],49:[2,92],51:[2,92],52:[2,92],54:[2,92],56:[2,92],61:[2,92],62:[2,92],63:[2,92],64:[2,92],65:[2,92],66:[2,92],67:[2,92],68:[2,92],69:[2,92],70:[2,92],71:[2,92],72:[2,92],73:[2,92],74:[2,92],75:[2,92],79:[2,92],80:[2,92],84:[2,92],85:[2,92]},{22:[1,161],38:[1,121]},{7:[2,96],14:[2,96],20:[2,96],22:[2,96],27:[2,96],29:[2,96],30:[2,96],31:[2,96],32:[2,96],33:[2,96],34:[2,96],36:[2,96],38:[2,96],40:[2,96],43:[2,96],44:[2,96],46:[2,96],47:[2,96],49:[2,96],51:[2,96],52:[2,96],54:[2,96],56:[2,96],61:[2,96],62:[2,96],63:[2,96],64:[2,96],65:[2,96],66:[2,96],67:[2,96],68:[2,96],69:[2,96],70:[2,96],71:[2,96],72:[2,96],73:[2,96],74:[2,96],75:[2,96],79:[2,96],80:[2,96],84:[2,96],85:[2,96]},{7:[2,15],14:[2,15],20:[2,15],22:[2,15],27:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],33:[2,15],34:[2,15],36:[2,15],38:[2,15],40:[2,15],43:[2,15],44:[2,15],46:[2,15],47:[2,15],49:[2,15],51:[2,15],52:[2,15],54:[2,15],56:[2,15],61:[2,15],62:[2,15],63:[2,15],64:[2,15],65:[2,15],66:[2,15],67:[2,15],68:[2,15],69:[2,15],70:[2,15],71:[2,15],72:[2,15],73:[2,15],74:[2,15],75:[2,15],79:[2,15],80:[2,15],84:[2,15],85:[2,15]},{17:39,18:46,19:47,20:[1,18],21:162,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{7:[2,19],14:[2,19],20:[2,19],27:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[2,19],33:[2,19],34:[2,19],36:[2,19],38:[1,121],40:[2,19],44:[2,19],46:[2,19],47:[2,19],49:[2,19],51:[2,19]},{7:[2,46],14:[2,46],20:[2,46],25:[2,46],27:[2,46],29:[2,46],30:[2,46],31:[2,46],32:[2,46],33:[2,46],34:[2,46],36:[2,46],38:[2,46],40:[2,46],44:[2,46],46:[2,46],47:[2,46],49:[2,46],51:[2,46]},{7:[2,31],14:[2,31],20:[2,31],27:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31],36:[2,31],40:[2,31],44:[2,31],46:[2,31],47:[2,31],49:[2,31],51:[2,31]},{30:[2,6],49:[2,6],51:[2,6]},{30:[1,163]},{7:[2,60],14:[2,60],20:[2,60],22:[2,60],27:[2,60],29:[2,60],30:[2,60],31:[2,60],32:[2,60],33:[2,60],34:[2,60],36:[2,60],38:[2,60],40:[2,60],44:[2,60],46:[2,60],47:[2,60],49:[2,60],51:[2,60],52:[2,60],61:[2,60],62:[2,60],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[2,60],68:[2,60],69:[2,60],70:[2,60],71:[2,60],72:[2,60],73:[2,60],74:[2,60],75:[2,60],80:[2,60],85:[2,60]},{7:[2,61],14:[2,61],20:[2,61],22:[2,61],27:[2,61],29:[2,61],30:[2,61],31:[2,61],32:[2,61],33:[2,61],34:[2,61],36:[2,61],38:[2,61],40:[2,61],44:[2,61],46:[2,61],47:[2,61],49:[2,61],51:[2,61],52:[2,61],61:[2,61],62:[2,61],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[2,61],68:[2,61],69:[2,61],70:[2,61],71:[2,61],72:[2,61],73:[2,61],74:[2,61],75:[2,61],80:[2,61],85:[2,61]},{7:[2,62],14:[2,62],20:[2,62],22:[2,62],27:[2,62],29:[2,62],30:[2,62],31:[2,62],32:[2,62],33:[2,62],34:[2,62],36:[2,62],38:[2,62],40:[2,62],44:[2,62],46:[2,62],47:[2,62],49:[2,62],51:[2,62],52:[2,62],61:[2,62],62:[2,62],63:[2,62],64:[2,62],65:[1,81],66:[2,62],67:[2,62],68:[2,62],69:[2,62],70:[2,62],71:[2,62],72:[2,62],73:[2,62],74:[2,62],75:[2,62],80:[2,62],85:[2,62]},{7:[2,63],14:[2,63],20:[2,63],22:[2,63],27:[2,63],29:[2,63],30:[2,63],31:[2,63],32:[2,63],33:[2,63],34:[2,63],36:[2,63],38:[2,63],40:[2,63],44:[2,63],46:[2,63],47:[2,63],49:[2,63],51:[2,63],52:[2,63],61:[2,63],62:[2,63],63:[2,63],64:[2,63],65:[1,81],66:[2,63],67:[2,63],68:[2,63],69:[2,63],70:[2,63],71:[2,63],72:[2,63],73:[2,63],74:[2,63],75:[2,63],80:[2,63],85:[2,63]},{7:[2,64],14:[2,64],20:[2,64],22:[2,64],27:[2,64],29:[2,64],30:[2,64],31:[2,64],32:[2,64],33:[2,64],34:[2,64],36:[2,64],38:[2,64],40:[2,64],44:[2,64],46:[2,64],47:[2,64],49:[2,64],51:[2,64],52:[2,64],61:[2,64],62:[2,64],63:[2,64],64:[2,64],65:[1,81],66:[2,64],67:[2,64],68:[2,64],69:[2,64],70:[2,64],71:[2,64],72:[2,64],73:[2,64],74:[2,64],75:[2,64],80:[2,64],85:[2,64]},{7:[2,65],14:[2,65],20:[2,65],22:[2,65],27:[2,65],29:[2,65],30:[2,65],31:[2,65],32:[2,65],33:[2,65],34:[2,65],36:[2,65],38:[2,65],40:[2,65],44:[2,65],46:[2,65],47:[2,65],49:[2,65],51:[2,65],52:[2,65],61:[2,65],62:[2,65],63:[2,65],64:[2,65],65:[1,81],66:[2,65],67:[2,65],68:[2,65],69:[2,65],70:[2,65],71:[2,65],72:[2,65],73:[2,65],74:[2,65],75:[2,65],80:[2,65],85:[2,65]},{7:[2,66],14:[2,66],20:[2,66],22:[2,66],27:[2,66],29:[2,66],30:[2,66],31:[2,66],32:[2,66],33:[2,66],34:[2,66],36:[2,66],38:[2,66],40:[2,66],44:[2,66],46:[2,66],47:[2,66],49:[2,66],51:[2,66],52:[2,66],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[2,66],69:[2,66],70:[2,66],71:[2,66],72:[2,66],73:[2,66],74:[2,66],75:[2,66],80:[2,66],85:[2,66]},{7:[2,67],14:[2,67],20:[2,67],22:[2,67],27:[2,67],29:[2,67],30:[2,67],31:[2,67],32:[2,67],33:[2,67],34:[2,67],36:[2,67],38:[2,67],40:[2,67],44:[2,67],46:[2,67],47:[2,67],49:[2,67],51:[2,67],52:[2,67],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[2,67],69:[2,67],70:[2,67],71:[2,67],72:[2,67],73:[2,67],74:[2,67],75:[2,67],80:[2,67],85:[2,67]},{7:[2,68],14:[2,68],20:[2,68],22:[2,68],27:[2,68],29:[2,68],30:[2,68],31:[2,68],32:[2,68],33:[2,68],34:[2,68],36:[2,68],38:[2,68],40:[2,68],44:[2,68],46:[2,68],47:[2,68],49:[2,68],51:[2,68],52:[2,68],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[2,68],69:[2,68],70:[2,68],71:[2,68],72:[2,68],73:[2,68],74:[2,68],75:[2,68],80:[2,68],85:[2,68]},{7:[2,69],14:[2,69],20:[2,69],22:[2,69],27:[2,69],29:[2,69],30:[2,69],31:[2,69],32:[2,69],33:[2,69],34:[2,69],36:[2,69],38:[2,69],40:[2,69],44:[2,69],46:[2,69],47:[2,69],49:[2,69],51:[2,69],52:[2,69],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[2,69],69:[2,69],70:[2,69],71:[2,69],72:[2,69],73:[2,69],74:[2,69],75:[2,69],80:[2,69],85:[2,69]},{7:[2,70],14:[2,70],20:[2,70],22:[2,70],27:[2,70],29:[2,70],30:[2,70],31:[2,70],32:[2,70],33:[2,70],34:[2,70],36:[2,70],38:[2,70],40:[2,70],44:[2,70],46:[2,70],47:[2,70],49:[2,70],51:[2,70],52:[2,70],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[2,70],69:[2,70],70:[2,70],71:[2,70],72:[2,70],73:[2,70],74:[2,70],75:[2,70],80:[2,70],85:[2,70]},{7:[2,71],14:[2,71],20:[2,71],22:[2,71],27:[2,71],29:[2,71],30:[2,71],31:[2,71],32:[2,71],33:[2,71],34:[2,71],36:[2,71],38:[2,71],40:[2,71],44:[2,71],46:[2,71],47:[2,71],49:[2,71],51:[2,71],52:[2,71],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[2,71],69:[2,71],70:[2,71],71:[2,71],72:[2,71],73:[2,71],74:[2,71],75:[2,71],80:[2,71],85:[2,71]},{7:[2,72],14:[2,72],20:[2,72],22:[2,72],27:[2,72],29:[2,72],30:[2,72],31:[2,72],32:[2,72],33:[2,72],34:[2,72],36:[2,72],38:[2,72],40:[2,72],44:[2,72],46:[2,72],47:[2,72],49:[2,72],51:[2,72],52:[2,72],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[2,72],69:[2,72],70:[2,72],71:[2,72],72:[2,72],73:[2,72],74:[2,72],75:[2,72],80:[2,72],85:[2,72]},{7:[2,73],14:[2,73],20:[2,73],22:[2,73],27:[2,73],29:[2,73],30:[2,73],31:[2,73],32:[2,73],33:[2,73],34:[2,73],36:[2,73],38:[2,73],40:[2,73],44:[2,73],46:[2,73],47:[2,73],49:[2,73],51:[2,73],52:[2,73],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[2,73],75:[2,73],80:[2,73],85:[2,73]},{7:[2,74],14:[2,74],20:[2,74],22:[2,74],27:[2,74],29:[2,74],30:[2,74],31:[2,74],32:[2,74],33:[2,74],34:[2,74],36:[2,74],38:[2,74],40:[2,74],44:[2,74],46:[2,74],47:[2,74],49:[2,74],51:[2,74],52:[2,74],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[2,74],80:[2,74],85:[2,74]},{22:[1,164],44:[1,167],53:165,78:[1,166]},{80:[1,168]},{17:39,18:46,19:47,20:[1,18],21:101,40:[1,40],44:[1,102],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45],84:[1,103],87:169},{20:[2,106],40:[2,106],44:[2,106],55:[2,106],56:[2,106],57:[2,106],58:[2,106],60:[2,106],62:[2,106],76:[2,106],77:[2,106],78:[2,106],79:[2,106],80:[2,106],84:[2,106]},{20:[2,107],40:[2,107],44:[2,107],55:[2,107],56:[2,107],57:[2,107],58:[2,107],60:[2,107],62:[2,107],76:[2,107],77:[2,107],78:[2,107],79:[2,107],80:[2,107],84:[2,107]},{17:39,18:46,19:47,20:[1,18],21:170,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91],85:[1,171]},{7:[2,24],14:[2,24],20:[2,24],27:[2,24],29:[2,24],30:[2,24],31:[2,24],32:[2,24],33:[2,24],34:[2,24],36:[2,24],40:[2,24],44:[2,24],46:[2,24],47:[2,24],49:[2,24],51:[2,24],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91]},{6:172,30:[2,3],33:[2,3]},{30:[2,36]},{30:[2,38],49:[2,38],51:[2,38]},{30:[2,39],49:[2,39],51:[2,39]},{17:39,18:46,19:47,20:[1,18],21:173,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:67,26:174,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{44:[1,175]},{4:94,8:177,20:[2,2],45:176},{20:[2,50],43:[2,50],54:[2,50]},{7:[2,94],14:[2,94],20:[2,94],22:[2,94],27:[2,94],29:[2,94],30:[2,94],31:[2,94],32:[2,94],33:[2,94],34:[2,94],36:[2,94],38:[2,94],40:[2,94],43:[2,94],44:[2,94],46:[2,94],47:[2,94],49:[2,94],51:[2,94],52:[2,94],54:[2,94],56:[2,94],61:[2,94],62:[2,94],63:[2,94],64:[2,94],65:[2,94],66:[2,94],67:[2,94],68:[2,94],69:[2,94],70:[2,94],71:[2,94],72:[2,94],73:[2,94],74:[2,94],75:[2,94],79:[2,94],80:[2,94],84:[2,94],85:[2,94]},{7:[2,91],14:[2,91],20:[2,91],22:[2,91],25:[2,91],27:[2,91],29:[2,91],30:[2,91],31:[2,91],32:[2,91],33:[2,91],34:[2,91],36:[2,91],38:[2,91],40:[2,91],43:[2,91],44:[2,91],46:[2,91],47:[2,91],49:[2,91],51:[2,91],52:[2,91],54:[2,91],56:[2,91],61:[2,91],62:[2,91],63:[2,91],64:[2,91],65:[2,91],66:[2,91],67:[2,91],68:[2,91],69:[2,91],70:[2,91],71:[2,91],72:[2,91],73:[2,91],74:[2,91],75:[2,91],79:[2,91],80:[2,91],84:[2,91],85:[2,91]},{7:[2,95],14:[2,95],20:[2,95],22:[2,95],27:[2,95],29:[2,95],30:[2,95],31:[2,95],32:[2,95],33:[2,95],34:[2,95],36:[2,95],38:[2,95],40:[2,95],43:[2,95],44:[2,95],46:[2,95],47:[2,95],49:[2,95],51:[2,95],52:[2,95],54:[2,95],56:[2,95],61:[2,95],62:[2,95],63:[2,95],64:[2,95],65:[2,95],66:[2,95],67:[2,95],68:[2,95],69:[2,95],70:[2,95],71:[2,95],72:[2,95],73:[2,95],74:[2,95],75:[2,95],79:[2,95],80:[2,95],84:[2,95],85:[2,95]},{7:[2,42],14:[2,42],20:[2,42],22:[2,42],27:[2,42],29:[2,42],30:[2,42],31:[2,42],32:[2,42],33:[2,42],34:[2,42],36:[2,42],38:[2,42],40:[2,42],44:[2,42],46:[2,42],47:[2,42],49:[2,42],51:[2,42],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91]},{7:[2,23],14:[2,23],20:[2,23],27:[2,23],29:[2,23],30:[2,23],31:[2,23],32:[2,23],33:[2,23],34:[2,23],36:[2,23],40:[2,23],44:[2,23],46:[2,23],47:[2,23],49:[2,23],51:[2,23]},{5:178,15:4,17:16,18:15,19:8,20:[1,18],23:5,24:6,27:[1,7],29:[1,9],30:[2,17],31:[1,10],32:[1,11],34:[1,12],36:[1,13],40:[1,14],44:[1,17],46:[2,17],47:[2,17]},{22:[1,179],38:[1,180]},{22:[1,181]},{22:[2,49],38:[2,49]},{7:[2,80],14:[2,80],20:[2,80],22:[2,80],27:[2,80],29:[2,80],30:[2,80],31:[2,80],32:[2,80],33:[2,80],34:[2,80],36:[2,80],38:[2,80],40:[2,80],43:[2,80],44:[2,80],46:[2,80],47:[2,80],49:[2,80],51:[2,80],52:[2,80],54:[2,80],56:[2,80],61:[2,80],62:[2,80],63:[2,80],64:[2,80],65:[2,80],66:[2,80],67:[2,80],68:[2,80],69:[2,80],70:[2,80],71:[2,80],72:[2,80],73:[2,80],74:[2,80],75:[2,80],79:[2,80],80:[2,80],84:[2,80],85:[2,80]},{14:[2,100],38:[2,100],80:[2,100]},{14:[2,102],38:[2,102],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91],80:[2,102]},{25:[1,182]},{30:[2,7],33:[2,7]},{38:[1,183],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91]},{29:[1,184],38:[1,121]},{25:[2,44],38:[2,44],39:[2,44]},{7:[2,30],14:[2,30],20:[2,30],27:[2,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30],36:[2,30],40:[2,30],44:[2,30],46:[2,30],47:[2,30],49:[2,30],51:[2,30]},{20:[2,89],83:185},{6:187,9:186,30:[2,3]},{5:188,15:4,17:16,18:15,19:8,20:[1,18],23:5,24:6,27:[1,7],29:[1,9],30:[2,17],31:[1,10],32:[1,11],34:[1,12],36:[1,13],40:[1,14],44:[1,17],46:[2,17],47:[2,17]},{44:[1,190],78:[1,189]},{5:191,15:4,17:16,18:15,19:8,20:[1,18],23:5,24:6,27:[1,7],29:[1,9],30:[2,17],31:[1,10],32:[1,11],34:[1,12],36:[1,13],40:[1,14],44:[1,17],46:[2,17],47:[2,17]},{17:39,18:46,19:47,20:[1,18],21:192,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{17:39,18:46,19:47,20:[1,18],21:193,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{11:194,12:49,20:[2,8],27:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],34:[2,8],36:[2,8],40:[2,8],44:[2,8],46:[2,8],47:[2,8]},{20:[1,195]},{30:[1,196]},{30:[2,5]},{6:187,9:197,30:[2,3]},{22:[1,198]},{22:[2,48],38:[2,48]},{6:187,9:199,30:[2,3]},{14:[2,103],38:[2,103],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91],80:[2,103]},{29:[1,200],38:[1,201],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91]},{6:202,30:[2,3]},{22:[1,203],44:[1,167],53:204,78:[1,205]},{7:[2,81],14:[2,81],20:[2,81],22:[2,81],27:[2,81],29:[2,81],30:[2,81],31:[2,81],32:[2,81],33:[2,81],34:[2,81],36:[2,81],38:[2,81],40:[2,81],44:[2,81],46:[2,81],47:[2,81],49:[2,81],51:[2,81],52:[2,81],61:[2,81],62:[2,81],63:[2,81],64:[2,81],65:[2,81],66:[2,81],67:[2,81],68:[2,81],69:[2,81],70:[2,81],71:[2,81],72:[2,81],73:[2,81],74:[2,81],75:[2,81],80:[2,81],85:[2,81]},{30:[1,206]},{5:207,15:4,17:16,18:15,19:8,20:[1,18],23:5,24:6,27:[1,7],29:[1,9],30:[2,17],31:[1,10],32:[1,11],34:[1,12],36:[1,13],40:[1,14],44:[1,17],46:[2,17],47:[2,17]},{30:[1,208]},{11:209,12:49,20:[2,8],27:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],34:[2,8],36:[2,8],40:[2,8],44:[2,8],46:[2,8],47:[2,8]},{17:39,18:46,19:47,20:[1,18],21:210,40:[1,40],44:[1,17],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:37,60:[1,38],62:[1,41],76:[1,42],77:[1,43],78:[1,44],79:[1,45]},{30:[1,211]},{5:212,15:4,17:16,18:15,19:8,20:[1,18],23:5,24:6,27:[1,7],29:[1,9],30:[2,17],31:[1,10],32:[1,11],34:[1,12],36:[1,13],40:[1,14],44:[1,17],46:[2,17],47:[2,17]},{22:[1,213],38:[1,214]},{22:[1,215]},{7:[2,82],14:[2,82],20:[2,82],22:[2,82],27:[2,82],29:[2,82],30:[2,82],31:[2,82],32:[2,82],33:[2,82],34:[2,82],36:[2,82],38:[2,82],40:[2,82],44:[2,82],46:[2,82],47:[2,82],49:[2,82],51:[2,82],52:[2,82],61:[2,82],62:[2,82],63:[2,82],64:[2,82],65:[2,82],66:[2,82],67:[2,82],68:[2,82],69:[2,82],70:[2,82],71:[2,82],72:[2,82],73:[2,82],74:[2,82],75:[2,82],80:[2,82],85:[2,82]},{6:187,9:216,30:[2,3]},{7:[2,83],14:[2,83],20:[2,83],22:[2,83],27:[2,83],29:[2,83],30:[2,83],31:[2,83],32:[2,83],33:[2,83],34:[2,83],36:[2,83],38:[2,83],40:[2,83],44:[2,83],46:[2,83],47:[2,83],49:[2,83],51:[2,83],52:[2,83],61:[2,83],62:[2,83],63:[2,83],64:[2,83],65:[2,83],66:[2,83],67:[2,83],68:[2,83],69:[2,83],70:[2,83],71:[2,83],72:[2,83],73:[2,83],74:[2,83],75:[2,83],80:[2,83],85:[2,83]},{6:217,30:[2,3]},{29:[1,218],61:[1,77],62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86],71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91]},{7:[2,28],14:[2,28],20:[2,28],27:[2,28],29:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28],36:[2,28],40:[2,28],44:[2,28],46:[2,28],47:[2,28],49:[2,28],51:[2,28]},{6:187,9:219,30:[2,3]},{5:220,15:4,17:16,18:15,19:8,20:[1,18],23:5,24:6,27:[1,7],29:[1,9],30:[2,17],31:[1,10],32:[1,11],34:[1,12],36:[1,13],40:[1,14],44:[1,17],46:[2,17],47:[2,17]},{44:[1,190],78:[1,221]},{5:222,15:4,17:16,18:15,19:8,20:[1,18],23:5,24:6,27:[1,7],29:[1,9],30:[2,17],31:[1,10],32:[1,11],34:[1,12],36:[1,13],40:[1,14],44:[1,17],46:[2,17],47:[2,17]},{30:[1,223]},{30:[1,224]},{11:225,12:49,20:[2,8],27:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],34:[2,8],36:[2,8],40:[2,8],44:[2,8],46:[2,8],47:[2,8]},{30:[1,226]},{6:187,9:227,30:[2,3]},{22:[1,228]},{6:187,9:229,30:[2,3]},{7:[2,84],14:[2,84],20:[2,84],22:[2,84],27:[2,84],29:[2,84],30:[2,84],31:[2,84],32:[2,84],33:[2,84],34:[2,84],36:[2,84],38:[2,84],40:[2,84],44:[2,84],46:[2,84],47:[2,84],49:[2,84],51:[2,84],52:[2,84],61:[2,84],62:[2,84],63:[2,84],64:[2,84],65:[2,84],66:[2,84],67:[2,84],68:[2,84],69:[2,84],70:[2,84],71:[2,84],72:[2,84],73:[2,84],74:[2,84],75:[2,84],80:[2,84],85:[2,84]},{7:[2,26],14:[2,26],20:[2,26],27:[2,26],29:[2,26],30:[2,26],31:[2,26],32:[2,26],33:[2,26],34:[2,26],36:[2,26],40:[2,26],44:[2,26],46:[2,26],47:[2,26],49:[2,26],51:[2,26]},{6:230,30:[2,3]},{7:[2,85],14:[2,85],20:[2,85],27:[2,85],29:[2,85],30:[2,85],31:[2,85],32:[2,85],33:[2,85],34:[2,85],36:[2,85],40:[2,85],44:[2,85],46:[2,85],47:[2,85],49:[2,85],51:[2,85]},{30:[1,231]},{5:232,15:4,17:16,18:15,19:8,20:[1,18],23:5,24:6,27:[1,7],29:[1,9],30:[2,17],31:[1,10],32:[1,11],34:[1,12],36:[1,13],40:[1,14],44:[1,17],46:[2,17],47:[2,17]},{30:[1,233]},{30:[1,234]},{7:[2,86],14:[2,86],20:[2,86],27:[2,86],29:[2,86],30:[2,86],31:[2,86],32:[2,86],33:[2,86],34:[2,86],36:[2,86],40:[2,86],44:[2,86],46:[2,86],47:[2,86],49:[2,86],51:[2,86]},{6:187,9:235,30:[2,3]},{7:[2,87],14:[2,87],20:[2,87],27:[2,87],29:[2,87],30:[2,87],31:[2,87],32:[2,87],33:[2,87],34:[2,87],36:[2,87],40:[2,87],44:[2,87],46:[2,87],47:[2,87],49:[2,87],51:[2,87]},{7:[2,27],14:[2,27],20:[2,27],27:[2,27],29:[2,27],30:[2,27],31:[2,27],32:[2,27],33:[2,27],34:[2,27],36:[2,27],40:[2,27],44:[2,27],46:[2,27],47:[2,27],49:[2,27],51:[2,27]},{30:[1,236]},{7:[2,88],14:[2,88],20:[2,88],27:[2,88],29:[2,88],30:[2,88],31:[2,88],32:[2,88],33:[2,88],34:[2,88],36:[2,88],40:[2,88],44:[2,88],46:[2,88],47:[2,88],49:[2,88],51:[2,88]}],
defaultActions: {65:[2,1],94:[2,4],151:[2,36],187:[2,5]},
parseError: function parseError (str, hash) {
    throw new Error(str);
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    //this.reductionCount = this.shiftCount = 0;

    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined')
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);

    var ranges = this.lexer.options && this.lexer.options.ranges;

    if (typeof this.yy.parseError === 'function')
        this.parseError = this.yy.parseError;

    function popStack (n) {
        stack.length = stack.length - 2*n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = self.lexer.lex() || 1; // $end = 1
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval={},p,len,newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length-1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

        // handle parse error
        _handle_error:
        if (typeof action === 'undefined' || !action.length || !action[0]) {

            var errStr = '';
            if (!recovering) {
                // Report error
                expected = [];
                for (p in table[state]) if (this.terminals_[p] && p > 2) {
                    expected.push("'"+this.terminals_[p]+"'");
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == 1 /*EOF*/ ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr,
                    {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol == EOF) {
                    throw new Error(errStr || 'Parsing halted.');
                }

                // discard current lookahead and grab another
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            while (1) {
                // check for error recovery rule in this state
                if ((TERROR.toString()) in table[state]) {
                    break;
                }
                if (state === 0) {
                    throw new Error(errStr || 'Parsing halted.');
                }
                popStack(1);
                state = stack[stack.length-1];
            }

            preErrorSymbol = symbol == 2 ? null : symbol; // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {

            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    yyloc = this.lexer.yylloc;
                    if (recovering > 0)
                        recovering--;
                } else { // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2: // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3: // accept
                return true;
        }

    }

    return true;
}};

/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex () {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },
popState:function popState () {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules () {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin (condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip multiline comment */
break;
case 2:/* skip comment */
break;
case 3:return 55;
break;
case 4:return 55;
break;
case 5:return 55;
break;
case 6:return 56;
break;
case 7:return 56;
break;
case 8:yy_.yytext = longStringToString(yy_.yytext); return 56;
break;
case 9:return 43;
break;
case 10:return 14;
break;
case 11:return 20;
break;
case 12:return 22;
break;
case 13:return 84;
break;
case 14:return 85;
break;
case 15:return 79;
break;
case 16:return 80;
break;
case 17:return 61;
break;
case 18:return 62;
break;
case 19:return 63;
break;
case 20:return 64;
break;
case 21:return 66;
break;
case 22:return 65;
break;
case 23:return 72;
break;
case 24:return 25;
break;
case 25:return 73;
break;
case 26:return 70;
break;
case 27:return 71;
break;
case 28:return 68;
break;
case 29:return 69;
break;
case 30:return 77;
break;
case 31:return 38;
break;
case 32:return 78;
break;
case 33:return 67;
break;
case 34:return 54;
break;
case 35:return 76;
break;
case 36:return 74;
break;
case 37:return 75;
break;
case 38:return 57;
break;
case 39:return 58;
break;
case 40:return 60;
break;
case 41:return 40;
break;
case 42:return 33;
break;
case 43:return 29;
break;
case 44:return 30;
break;
case 45:return 31;
break;
case 46:return 34;
break;
case 47:return 52;
break;
case 48:return 51;
break;
case 49:return 49;
break;
case 50:return 36;
break;
case 51:return 27;
break;
case 52:return 32;
break;
case 53:return 39;
break;
case 54:return 46;
break;
case 55:return 47;
break;
case 56:return 44;
break;
case 57:return 7;
break;
}
};
lexer.rules = [/^(?:\s+)/,/^(?:--\[\[(.|\n|\r)*?\]\])/,/^(?:--.*)/,/^(?:0x[0-9a-fA-f]+)/,/^(?:\d+(\.\d*)?([eE]-?\d+)?)/,/^(?:\.\d+([eE]-?\d+)?)/,/^(?:"(\\.|[^"])*")/,/^(?:'(\\.|[^'])*')/,/^(?:\[\[(.|\n|\r)*?\]\])/,/^(?::)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:==)/,/^(?:=)/,/^(?:~=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:#)/,/^(?:,)/,/^(?:\.\.\.)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:not\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:nil\b)/,/^(?:function\b)/,/^(?:until\b)/,/^(?:do\b)/,/^(?:end\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:local\b)/,/^(?:repeat\b)/,/^(?:in\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/];
lexer.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;
return parser;
/*
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;*/
})();
/*
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); }
exports.main = function commonjsMain (args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    var source, cwd;
    if (typeof process !== 'undefined') {
        source = require("fs").readFileSync(require("path").resolve(args[1]), "utf8");
    } else {
        source = require("file").path(require("file").cwd()).join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
}*/

/*
   Copyright 2011 Maximilian Herkender

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// slice that works in as3 and js on arguments
function slice(arr, start) {
  if (arr.slice) {
    return arr.slice(start);
  } else {
    return Array.prototype.slice.call(arr, start);
  }
}

// not supported call
function not_supported() {
  throw new Error("Not supported");
}

function ensure_arraymode(table) {
  if (!table.arraymode) {
    var newuints = [];
    for (var i in table.uints) {
      if (table.uints[i] != null) {
        newuints[i - 1] = table.uints[i];
      }
    }
    table.uints = newuints;
    table.arraymode = true;
  }
}
function ensure_notarraymode(table) {
  if (table.arraymode) {
    var newuints = {};
    for (var i in table.uints) {
      if (table.uints[i] != null) {
        newuints[i - -1] = table.uints[i];
      }
    }
    table.uints = newuints;
    delete table.arraymode;
  }
}

function ReturnValues(vars) {
  this.vars = vars || [];
}

// methods used by generated lua code
function lua_true(op) {
  return op != null && op !== false;
}
function lua_not(op) {
  return op == null || op === false;
}
function lua_and(op1, op2) {
  return op1 == null || op1 === false ? op1 : op2();
}
function lua_or(op1, op2) {
  return op1 != null && op1 !== false ? op1 : op2();
}
function lua_assertfloat(n) {
  var result = parseFloat(n);
  if (isNaN(result)) {
    throw new Error("Invalid number: " + n);
  }
  return result;
}
function lua_newtable(autoIndexList) {
  var result = {str: {}, uints: {}, floats: {}, bool: {}, objs: []};
  for (var i = 1; i < arguments.length - 1; i += 2) {
    var value = arguments[i + 1];
    if (value == null) {
      continue;
    }
    var key = arguments[i];
    switch (typeof key) {
      case "string":
        result.str[key] = value;
        break;
      case "number":
        if (key != key) {
          throw new Error("Table index is NaN");
        }
        if (key > 0 && (key | 0) == key) {
          result.uints[key] = value;
        } else {
          result.floats[key] = value;
        }
        break;
      case "boolean":
        result.bool[key] = value;
        break;
      case "object":
        if (key == null) {
          throw new Error("Table index is nil");
        }
        var bFound = false;
        for (var i in result.objs) {
          if (result.objs[i][0] === key) {
            if (value == null) {
              result.objs.splice(i, 1); // remove element [i]
            } else {
              bFound = true;
              // modify/overwrite existing entry
              // (could happen that same key is used twice in autoIndexList)
              result.objs[i][1] = value; 
            }
            break;
          }
        }
        if (!bFound) {
          result.objs.push([key,value]); // add new entry
        }
        break;
      default:
        throw new Error("Unsupported type for table: " + (typeof key));
    }
  }
  if (autoIndexList) {
    ensure_arraymode(result);
    if (result.uints.length == 0) {
      result.uints = autoIndexList;
    } else {
      i = autoIndexList.length;
      while (i-- > 0) {
        result.uints[i] = autoIndexList[i];
      }
    }
  }
  return result;
}
function lua_newtable2(str) {
  var str_copy = {};
  for (var i in str) {
    str_copy[i] = str[i];
  }
  return {str: str_copy, uints: {}, floats: {}, bool: {}, objs: {}};
}
function lua_len(op) {
  if (typeof op == "string") {
    return op.length;
  } else if (typeof op == "object" && op != null) {
    if (op.length == null) {
      var index = 0;
      if (op.arraymode) {
        while (op.uints[index++] != null) {};
        return op.length = index - 1;
      } else {
        while (op.uints[++index] != null) {};
        return op.length = index - 1;
      }
    } else {
      return op.length;
    }
  } else {
    var h = op.metatable && op.metatable.str["__len"];
    if (h) {
      return lua_rawcall(h, [op])[0];
    } else {
      throw new Error("Length of <" + op + "> not supported");
    }
  }
}
function lua_rawcall(func, args) {
  try {
    return func.apply(null, args);
  } catch (e) {
    if (e.constructor == ReturnValues) {
      return e.vars;
    }
    // This breaks the stack on Chrome
    // <http://code.google.com/p/chromium/issues/detail?id=60240>
    throw e;
  }
}

// could be replaced by lua_call(lua_tableget(table, key), args)
// but this gives better error messages
function lua_tablegetcall(table, key, args) {
  var func = lua_tableget(table, key);
  if (typeof func == "function") {
    return lua_rawcall(func, args);
  } else {
    if (func == null) {
      throw new Error("attempt to call field '" + key + "' (a nil value)");
    }
    var h = func.metatable && func.metatable.str["__call"];
    if (h != null) {
      return lua_rawcall(h, [func].concat(args));
    } else {
      throw new Error("Could not call " + func + " as function");
    }
  }
}
function lua_call(func, args) {
  if (typeof func == "function") {
    return lua_rawcall(func, args);
  } else {
    if (func == null) {
      throw new Error("attempt to call function (a nil value)");
    }
    var h = func.metatable && func.metatable.str["__call"];
    if (h != null) {
      return lua_rawcall(h, [func].concat(args));
    } else {
      throw new Error("Could not call " + func + " as function");
    }
  }
}
function lua_mcall(obj, methodname, args) {
  var func = lua_tableget(obj, methodname);
  if (func == null) {
    throw new Error("attempt to call method '" + methodname + "' (a nil value)");
  }
  return lua_call(func, [obj].concat(args));
}
function lua_eq(op1, op2) {
  if (typeof op1 != typeof op2) {
    if (op1 == null && op2 == null) {
      return true;
    }
    return false;
  }
  if (op1 == op2) {
    return true;
  }
  if (op1 == null || op2 == null) {
    return false;
  }
  var h = op1.metatable && op1.metatable.str["__eq"];
  if (h && h == (op2.metatable && op2.metatable.str["__eq"])) {
    return lua_true(lua_rawcall(h, [op1, op2])[0]);
  } else {
    return false;
  }
}
function lua_lt(op1, op2) {
  if (typeof op1 == "number" && typeof op2 == "number") {
    return op1 < op2;
  } else if (typeof op1 == "string" && typeof op2 == "string") {
    // TODO: not sure how similar lua/javascript string comparison is
    return op1 < op2;
  } else {
    var h = op1.metatable && op1.metatable.str["__lt"];
    if (h && h == (op2.metatable && op2.metatable.str["__lt"])) {
      return lua_true(lua_rawcall(h, [op1, op2])[0]);
    } else {
      throw new Error("Unable to compare " + op1 + " and " + op2);
    }
  }
}
function lua_lte(op1, op2) {
  if (typeof op1 == "number" && typeof op2 == "number") {
    return op1 <= op2;
  } else if (typeof op1 == "string" && typeof op2 == "string") {
    // TODO: not sure how similar lua/javascript string comparison is
    return op1 <= op2;
  } else {
    var h = op1.metatable && op1.metatable.str["__le"];
    if (h && h == (op2.metatable && op2.metatable.str["__le"])) {
      return lua_true(lua_rawcall(h, [op1, op2])[0]);
    } else {
      var h = op1.metatable && op1.metatable.str["__lt"];
      if (h && h == (op2.metatable && op2.metatable.str["__lt"])) {
        return lua_not(lua_rawcall(h, [op2, op1])[0]);
      } else {
        throw new Error("Unable to compare " + op1 + " and " + op2);
      }
    }
  }
}
function lua_unm(op) {
  var o = parseFloat(op);
  if (o != null) {
    return -o;
  } else {
    var h = op.metatable && op.metatable.str["__unm"];
    if (h) {
      return lua_rawcall(h, [op])[0];
    } else {
      throw new Error("Inverting <" + op + "> not supported");
    }
  }
}
function lua_add(op1, op2) {
  var o1 = parseFloat(op1), o2 = parseFloat(op2);
  if (o1 == null || o2 == null) {
    var h = (op1.metatable && op1.metatable.str["__add"]) || (op2.metatable && op2.metatable.str["__add"]);
    if (h) {
      return lua_rawcall(h, [op1, op2])[0];
    } else {
      throw new Error("Adding <" + op1 + "> and <" + op2 + "> not supported");
    }
  } else {
    return o1 + o2;
  }
}
function lua_subtract(op1, op2) {
  var o1 = parseFloat(op1), o2 = parseFloat(op2);
  if (o1 == null || o2 == null) {
    var h = (op1.metatable && op1.metatable.str["__sub"]) || (op2.metatable && op2.metatable.str["__sub"]);
    if (h) {
      return lua_rawcall(h, [op1, op2])[0];
    } else {
      throw new Error("Subtracting <" + op1 + "> and <" + op2 + "> not supported");
    }
  } else {
    return o1 - o2;
  }
}
function lua_divide(op1, op2) {
  var o1 = parseFloat(op1), o2 = parseFloat(op2);
  if (o1 == null || o2 == null) {
    var h = (op1.metatable && op1.metatable.str["__div"]) || (op2.metatable && op2.metatable.str["__div"]);
    if (h) {
      return lua_rawcall(h, [op1, op2])[0];
    } else {
      throw new Error("Dividing <" + op1 + "> and <" + op2 + "> not supported");
    }
  } else {
    return o1 / o2;
  }
}
function lua_multiply(op1, op2) {
  var o1 = parseFloat(op1), o2 = parseFloat(op2);
  if (o1 == null || o2 == null) {
    var h = (op1.metatable && op1.metatable.str["__mul"]) || (op2.metatable && op2.metatable.str["__mul"]);
    if (h) {
      return lua_rawcall(h, [op1, op2])[0];
    } else {
      throw new Error("Multiplying <" + op1 + "> and <" + op2 + "> not supported");
    }
  } else {
    return o1 * o2;
  }
}
function lua_power(op1, op2) {
  var o1 = parseFloat(op1), o2 = parseFloat(op2);
  if (o1 == null || o2 == null) {
    var h = (op1.metatable && op1.metatable.str["__pow"]) || (op2.metatable && op2.metatable.str["__pow"]);
    if (h) {
      return lua_rawcall(h, [op1, op2])[0];
    } else {
      throw new Error("<" + op1 + "> to the power of <" + op2 + "> not supported");
    }
  } else {
    return Math.pow(o1, o2);
  }
}
function lua_mod(op1, op2) {
  var o1 = parseFloat(op1), o2 = parseFloat(op2);
  if (o1 == null || o2 == null) {
    var h = (op1.metatable && op1.metatable.str["__mod"]) || (op2.metatable && op2.metatable.str["__mod"]);
    if (h) {
      return lua_rawcall(h, [op1, op2])[0];
    } else {
      throw new Error("Modulo <" + op1 + "> and <" + op2 + "> not supported");
    }
  } else {
    if (o1 >= 0) {
      if (o2 >= 0) {
        return o1 % o2;
      } else {
        return (o2 + (o1 % o2)) % o2;
      }
    } else {
      if (o2 >= 0) {
        return (o2 + (o1 % o2)) % o2;
      } else {
        return o1 % o2;
      }
    }
  }
}
function lua_rawget(table, key) {
  switch (typeof key) {
    case "string":
      return table.str[key];
    case "number":
      if (key != key) {
        throw new Error("Table index is NaN");
      }
      if (key > 0 && (key | 0) == key) {
        if (table.arraymode) {
          return table.uints[key - 1];
        } else {
          return table.uints[key];
        }
      } else {
        return table.floats[key];
      }
    case "boolean":
      return table.bool[key];
    case "object":
      if (key == null) {
        throw new Error("Table index is nil");
      }
      for (var i in table.objs) {
        if (table.objs[i][0] == key) {
          return table.objs[i][1];
        }
      }
	break;
    default:
      throw new Error("Unsupported key for table: " + (typeof key));
  }
}
function lua_rawset(table, key, value) {
  delete table.length;
  switch (typeof key) {
    case "string":
      if (value == null) {
        delete table.str[key];
      } else {
        table.str[key] = value;
      }
      break;
    case "number":
      if (key != key) {
        throw new Error("Table index is NaN");
      }
      if (key > 0 && (key | 0) == key) {
        ensure_notarraymode(table);
        if (value == null) {
          delete table.uints[key];
        } else {
          table.uints[key] = value;
        }
      } else {
        if (value == null) {
          delete table.floats[key];
        } else {
          table.floats[key] = value;
        }
      }
      break;
    case "boolean":
      if (value == null) {
        delete table.bool[key];
      } else {
        table.bool[key] = value;
      }
      break;
    case "object":
      if (key == null) {
        throw new Error("Table index is nil");
      }
      var bFound = false;
      for (var i in table.objs) {
        if (table.objs[i][0] == key) {
          if (value == null) {
            table.objs.splice(i,1); // remove element [i]
          } else {
            bFound = true;
            table.objs[i][1] = value; // modifiy/overwrite existing entry
          }
          break;
        }
      }
      if (!bFound) {
        table.objs.push([key,value]); // add new entry
      }
      break;
    default:
      throw new Error("Unsupported key for table: " + (typeof key));
  }
}
function lua_tableget(table, key) {
  if (table == null) {
    throw new Error("attempt to index field '" + key + "' in a nil value");
  }
  if (typeof table == "object") {
    var v = lua_rawget(table, key);
    if (v != null) {
      return v;
    }
    var h = table.metatable && table.metatable.str["__index"];
    if (h == null) {
      return null;
    }
  } else {
    var h = table.metatable && table.metatable.str["__index"];
    if (h == null) {
      throw new Error("Unable to index key " + key + " from " + table);
    }
  }
  if (typeof h == "function") {
    return lua_rawcall(h, [table, key])[0];
  } else {
    return lua_tableget(h, key);
  }
}
function lua_tableset(table, key, value) {
  if (table == null) {
    throw new Error("attempt to set field '" + key + "' in a nil value");
  }
  if (typeof table == "object") {
    var v = lua_rawget(table, key);
    if (v != null) {
      lua_rawset(table, key, value);
      return;
    }
    var h = table.metatable && table.metatable.str["__newindex"];
    if (h == null) {
      lua_rawset(table, key, value);
      return;
    }
  } else {
    var h = table.metatable && table.metatable.str["__newindex"];
    if (h == null) {
      throw new Error("Unable to set key " + key + " in table " + table);
    }
  }
  if (typeof h == "function") {
    lua_rawcall(h, [table, key, value]);
  } else {
    lua_tableset(h, key, value);
  }
}
function lua_concat(op1, op2) {
  if (typeof op1 == "number" && typeof op2 == "number") {
    throw new Error("number concat not supported yet");
  } else if ((typeof op1 == "string" || typeof op1 == "number") && (typeof op2 == "string" || typeof op2 == "number")) {
    return op1 + op2;
  } else {
    var h = (op1.metatable && op1.metatable.str["__concat"]) || (op2.metatable && op2.metatable.str["__concat"]);
    if (h) {
      return lua_rawcall(h, [op1, op2])[0];
    } else {
      throw new Error("Unable to concat " + op1 + " and " + op2);
    }
  }
}

// core lua functions
function _ipairs_next(table, index) {
  var entry;
  if (table.arraymode) {
    entry = table.uints[index];
  } else {
    entry = table.uints[index + 1];
  }
  if (entry == null) {
    return [null, null];
  }
  return [index + 1, entry];
}
var lua_libs = {};
var lua_core = {
  "assert": function (value, message) {
    if (arguments.length < 1) {
      message = "assertion failed!";
    }
    if (value != null && value !== false) {
      return value;
    } else {
      throw new Error(message);
    }
  },
  "collectgarbage": function () {},// no-op
  "dofile": function () {
    not_supported();
  },
  "error": function (message, level) {
    // TODO: "level" is currently ignored
    throw new Error(message);
  },
  "getfenv": function (func, table) {
    not_supported();
  },
  "getmetatable": function (op) {
    return [op.metatable && (op.metatable.str["__metatable"] || op.metatable)];
  },
  "ipairs": function (table) {
    return [_ipairs_next, table, 0];
  },
  "load": function (func, chunkname) {
    var script = "", chunk;
    while ((chunk = func()) != null && chunk != "") {
      script += chunk;
    }
    try {
      return [lua_load(script, chunkname)];
    } catch (e) {
      return [null, e.message];
    }
  },
  "loadfile": function () {
    not_supported();
  },
  "loadstring": function (string, chunkname) {
    try {
      return [lua_load(string, chunkname)];
    } catch (e) {
      return [null, e.message];
    }
  },
  "next": function () {
    not_supported();
  },
  "pairs": function (table) {
    var props = [], i;
    for (i in table.str) {
      props.push(i);
    }
    if (table.arraymode) {
      var j = table.uints.length;
      while (j-- > 0) {
        if (table.uints[j] != null) {
          props.push(j + 1);
        }
      }
    } else {
      for (i in table.uints) {
        props.push(parseFloat(i));
      }
    }
    for (i in table.floats) {
      props.push(parseFloat(i));
    }
    for (i in table.bool) {
      props.push(i === "true" ? true : false);
    }
    for (i in table.objs) {
      props.push(table.objs[i][0]);
    }

    // okay, so I'm faking it here
    // regardless of what key is given, this function will return the next value
    // not sure how to do it the "right way" right now
    i = 0;
    return [function (table, key) {
      var entry;
      do {
        if (i >= props.length) {
          return [null, null];
        }
        key = props[i++];
        entry = lua_rawget(table, key);
      } while (entry == null);
      return [key, entry];
    }, table, null];
  },
  "pcall": function (func) {
    try {
      return [true].concat(func.apply(null, slice(arguments, 1)));
    } catch (e) {
      return [false, e.message];
    }
  },
  "print": lua_print,
  "rawequal": function (op1, op2) {
    return (op1 == op2) || (op1 == null && op2 == null);
  },
  "rawget": function (table, key) {
    if (typeof table == "object" && table != null && key != null) {
      return [lua_rawget(table, key)];
    }
    throw new Error("Unable to index key " + key + " from " + table);
  },
  "rawset": function (table, key, value) {
    if (typeof table == "object" && table != null && key != null) {
      lua_rawset(table, key, value);
      return [table];
    }
    throw new Error("Unable set key " + key + " in " + table);
  },
  "select": function () {
    not_supported();
  },
  "setfenv": function (func, table) {
    not_supported();
  },
  "setmetatable": function (table, metatable) {
    if (typeof table != "object" || table == null) {
      throw new Error("table expected, got " + table);
    }
    if (metatable == null) {
      delete table.metatable;
    } else if (typeof metatable === "object") {
      table.metatable = metatable;
    } else {
      throw new Error("table or nil expected, got " + metatable);
    }
    return [table]
  },
  "tonumber": function (e, base) {
    if (typeof e == "number") {
      return [e];
    }
    if (base === 10 || base == null) {
      return [parseFloat(e)];
    } else {
      return [parseInt(e, base)];
    }
  },
  "tostring": function (e) {
    if (e == null) {
      return ["nil"];
    }
    var h = e.metatable && e.metatable.str["__tostring"];
    if (h) {
      return lua_rawcall(h, [e]);
    } else {
      switch (typeof(e)) {
        case "number":
        case "boolean":
          return [e.toString()];
        case "string":
          return [e];
        case "object":
          return ["table"];
        case "function":
          return ["function"];
        default:
          return ["nil"];
      }
    }
  },
  "type": function (v) {
    switch (typeof v) {
      case "number":
        return ["number"];
      case "string":
        return ["string"];
      case "boolean":
        return ["boolean"];
      case "function":
        return ["function"];
      case "object":
        return [v === null ? "nil" : "table"];
      case "undefined":
        return ["nil"];
      default:
        throw new Error("Unepected value of type " + typeof v);
    }
  },
  "unpack": function (list, i, j) {
    ensure_arraymode(list);
    if (list.length != null) {
      j = list.length;
    } else {
      j = 0;
      while (list.uints[j++] != null) {};
      list.length = --j;
    }

    if (i == null || i < 1) {
      i = 1;
    }
    if (j == null) {
      j = list.length;
    }
    throw new ReturnValues(list.uints.slice(i - 1, j));
  },
  "_VERSION": "Lua 5.1",
  "xpcall": function () {
    not_supported();
  }
};

// coroutine
var _lua_coroutine = lua_libs["coroutine"] = {};
_lua_coroutine["resume"] = _lua_coroutine["running"] = _lua_coroutine["status"] = _lua_coroutine["wrap"] = _lua_coroutine["yield"] = _lua_coroutine["create"] = function () {
  not_supported();
};

// debug
var _lua_debug = lua_libs["debug"] = {
  "getmetatable": function (obj) {
    return [obj.metatable];
  }
};
_lua_debug["traceback"] = _lua_debug["getfenv"] = _lua_debug["gethook"] = _lua_debug["getinfo"] = _lua_debug["getlocal"] = _lua_debug["getregistry"] = _lua_debug["getupvalue"] = _lua_debug["setfenv"] = _lua_debug["sethook"] = _lua_debug["setlocal"] = _lua_debug["setupvalue"] = _lua_debug["debug"] = function () {
  not_supported();
};

// io
var _lua_write_buffer = "";
var _lua_io = lua_libs["io"] = {
  "write": function () {
    _lua_write_buffer += Array.prototype.join.call(arguments, "");
    var lines = _lua_write_buffer.split("\n");
    while (lines.length > 1) {
      _lua_print(lines.shift());
    }
    _lua_write_buffer = lines[0];
    return [];
  },
  "flush": function () {},// no-op
  "stderr": null,
  "stdin": null,
  "stdout": null
};
_lua_io["close"] = _lua_io["input"] = _lua_io["lines"] = _lua_io["output"] = _lua_io["popen"] = _lua_io["read"] = _lua_io["tmpfile"] = _lua_io["type"] = _lua_io["open"] = function () {
  not_supported();
};

// math
var _lua_randmax = 0x100000000;
var _lua_randseed = (Math.random() * _lua_randmax) & (_lua_randmax - 1);
lua_libs["math"] = {
  "abs": function (x) {
    return [Math.abs(x)];
  },
  "acos": function (x) {
    return [Math.acos(x)];
  },
  "asin": function (x) {
    return [Math.asin(x)];
  },
  "atan": function (x) {
    return [Math.atan(x)];
  },
  "atan2": function (y, x) {
    return [Math.atan2(y, x)];
  },
  "ceil": function (x) {
    return [Math.ceil(x)];
  },
  "cos": function (x) {
    return [Math.cos(x)];
  },
  "cosh": function (x) {
    return [(Math.exp(x) + Math.exp(-x)) / 2];
  },
  "deg": function (x) {
    return [x * (180 / Math.PI)];
  },
  "exp": function (x) {
    return [Math.exp(x)];
  },
  "floor": function (x) {
    return [Math.floor(x)];
  },
  "fmod": function (x, y) {
    return [x % y];
  },
  "frexp": function (m, e) {
    not_supported();
  },
  "huge": Infinity,
  "ldexp": function (m, e) {
    return [m * Math.pow(2, e)];
  },
  "log": function (x) {
    return [Math.log(x)];
  },
  "log10": function (x) {
    return [Math.log(x) / Math.LN10];
  },
  "max": function () {
    return [Math.max.apply(null, arguments)];
  },
  "min": function () {
    return [Math.min.apply(null, arguments)];
  },
  "modf": function (x) {
    var frac = x % 1;
    return [x - frac, frac];
  },
  "pi": Math.PI,
  "pow": function (x, y) {
    return [Math.pow(x, y)];
  },
  "rad": function (x) {
    return [x * (Math.PI / 180)];
  },
  "sin": function (x) {
    return [Math.sin(x)];
  },
  "sinh": function (x) {
    return [(Math.exp(x) - Math.exp(-x)) / 2];
  },
  "sqrt": function (x) {
    return [Math.sqrt(x)];
  },
  "tan": function (x) {
    return [Math.tan(x)];
  },
  "tanh": function (x) {
    var a = Math.exp(x);
    var b = Math.exp(-x);
    return [(a - b) / (a + b)];
  },
  "random": function (m, n) {
    // Based on the 32 bit mix function found here:
    // http://www.concentric.net/~Ttwang/tech/inthash.htm
    _lua_randseed = ~_lua_randseed + (_lua_randseed << 15); // _lua_randseed = (_lua_randseed << 15) - _lua_randseed - 1;
    _lua_randseed = _lua_randseed ^ (_lua_randseed >>> 12);
    _lua_randseed = _lua_randseed + (_lua_randseed << 2);
    _lua_randseed = _lua_randseed ^ (_lua_randseed >>> 4);
    _lua_randseed = _lua_randseed * 2057; // _lua_randseed = (_lua_randseed + (_lua_randseed << 3)) + (_lua_randseed << 11);
    _lua_randseed = _lua_randseed ^ (_lua_randseed >>> 16);

    var val;
    if (_lua_randseed < 0) {
      val = ((_lua_randseed + _lua_randmax) / _lua_randmax) % 1;
    } else {
      val = (_lua_randseed / _lua_randmax) % 1;
    }

    if (arguments.length >= 2) {
      if (m >= n) {
        throw new Error("Invalid range");
      }
      return [Math.floor(val * (n - m + 1) + m)];
    } else if (arguments.length == 1) {
      return [Math.floor(val * m + 1)];
    } else {
      return [val];
    }
  },
  "randomseed": function (x) {
    _lua_randseed = x & (_lua_randmax - 1);
  }
};

// os
// TODO: this should be different for each script, I think?
var _lua_clock_start = (new Date()).getTime() / 1000;
lua_libs["os"] = {
  "clock": function () {
    // This function is supposed to return the time the script has been executing
    // not the time since it started, but I don't know of a way to do this.
    return [(((new Date()).getTime()) / 1000) - _lua_clock_script];
  },
  "date": function (format, time) {
    // TODO
    return ["[" + time + "]" + format];
  },
  "difftime": function (t2, t1) {
    return [t2 - t1];
  },
  "execute": function () {
    return 0;// all commands fail
  },
  "exit": function () {
    //window.close();
    not_supported();
  },
  "getenv": function (varname) {
    return [null];
  },
  "remove": function () {
    not_supported();
  },
  "rename": function () {
    not_supported();
  },
  "setlocale": function () {
    not_supported();
  },
  "time": function (table) {
    if (table) {
      not_supported();
    } else {
      return [new Date().getTime()]; // thanks ghoulsblade
    }
  }
};

// package
var lua_packages = lua_newtable();
function lua_createmodule(G, name, options) {
  var t = lua_tableget(lua_packages, name) || lua_tableget(G, name) || lua_newtable();
  lua_tableset(G, name, t);
  lua_tableset(lua_packages, name, t);
  lua_tableset(t, "_NAME", name);
  lua_tableset(t, "_M", t);
  lua_tableset(t, "_PACKAGE", name.split(".").slice(0, -1).join("."));

  for (var i = 0; i < options.length; i++) {
    lua_call(options[i], [t]);
  }
  return t;
}
function lua_module(name) {
  var t = lua_tableget(lua_packages, name);
  if (t == null) {
    throw new Error("Module " + name + " not found. Module must be loaded before use.");
  }
  return t;
}
function lua_require(G, name) {
  var t = lua_module(name);
  var pkg = G;
  var names = name.split(".");
  for (var i = 0; i < names.length - 1; i++) {
    if (!lua_tableget(pkg, names[i])) {
      var newPkg = lua_newtable();
      lua_tableset(pkg, names[i], newPkg);
      pkg = newPkg;
    }
  }
  lua_tableset(pkg, names[names.length - 1], t);
  return t;
}
lua_libs["package"] = {
  "path": "",
  "cpath": "",
  "loaded": lua_packages,
  "loaders": lua_newtable(),// not used
  "preload": lua_newtable(),// not used
  "loadlib": function () {
    not_supported();
  }
};

// string
lua_libs["string"] = {
  "byte": function (s, i, j) {
    if (i == null) {
      i = 0;
    }
    if (j == null) {
      j = i;
    }
    var result = [];
    while (i < j && i < s.length) {
      result.push(s.charCodeAt(i));
    }
    return result;
  },
  "char": function () {
    return [String.fromCharCode.apply(null, arguments)];
  },
  "dump": function (func) {
    not_supported();
  },
  "find": function () {
    // TODO
    not_supported();
  },
  "format": function (formatstring) {
    // TODO: Finish implementation
    return ["[" + slice(arguments, 1).join(", ") + "]" + arguments[0]];
  },
  "gmatch": function (s, pattern) {
    // TODO
    not_supported();
  },
  "gsub": function (s, pattern, repl, n) {
    // TODO
    not_supported();
  },
  "len": function (s) {
    if (typeof s == "string") {
      return [s.length];
    } else {
      throw new Error("Input not string");
    }
  },
  "lower": function (s) {
    if (typeof s == "string") {
      return [s.toLowerCase()];
    } else {
      throw new Error("Input not string");
    }
  },
  "match": function (s) {
    // TODO
    not_supported();
  },
  "rep": function (s, n) {
    if (typeof s == "string" && typeof n == "number") {
      var result = [];
      while (n-- > 0) {
        result.push(s);
      }
      return [result.join("")];
    } else {
      throw new Error("Input not string and number");
    }
  },
  "reverse": function (s) {
    if (typeof s == "string") {
      return [s.split("").reverse().join("")];
    } else {
      throw new Error("Input not string");
    }
  },
  "sub": function (s, i, j) {
    // thanks to ghoulsblade for pointing out the bugs in string.sub
    i = i < 0 ? (i + s.length + 1) : (i >= 0 ? i : 0)
    if (j == null) {
      j = -1;
    }
    j = j < 0 ? (j + s.length + 1) : (j >= 0 ? j : 0)
    if (i < 1) {
      i = 1;
    }
    if (j > s.length) {
      j = s.length;
    }
    if (i <= j) {
      return [s.substr(i - 1, j - i + 1)];
    } else {
      return [""];
    }
  },
  "upper": function (s) {
    if (typeof s == "string") {
      return [s.toUpperCase()];
    } else {
      throw new Error("Input not string");
    }
  }
};

// add string functions to every string
String.prototype["metatable"] = lua_newtable(null, "__index", lua_newtable2(lua_libs["string"]));

// table
lua_libs["table"] = {
  "concat": function (table, sep, i, j) {
    ensure_arraymode(table);
    if (sep == null) {
      sep = "";
    }
    if (i != null) {
      if (j == null) {
        j = table.uints.length;
      }
      return [table.uints.slice(i - 1, j).join(sep)];
    } else {
      return [table.uints.join(sep)];
    }
  },
  "insert": function (table, pos, value) {
    ensure_arraymode(table);
    if (arguments.length == 2) {
      value = pos;
      pos = table.uints.length + 1;
    }
    table.uints.splice(pos - 1, 0, value);
    if (table.length != null) {
      table.length++;
    }
    return [];
  },
  "maxn": function (table) {
    if (table.arraymode) {
      return [table.uints.length];
    } else {
      var max = 0;
      for (var i in table.uints) {
        var val = parseFloat(i);
        if (val > max) {
          max = val;
        }
      }
      return [max];
    }
  },
  "remove": function (table, pos) {
    // TODO: This will probably mess up if pos is not valid
    ensure_arraymode(table);
    var value = table.uints[pos - 1];
    table.uints.splice(pos - 1, 1);
    if (table.length != null) {
      table.length--;
    }
    return [value];
  },
  "sort": function (table, comp) {
    ensure_arraymode(table)
    if (comp) {
      table.uints.sort(function (a, b) {
        return comp(a, b)[0] ? -1 : 1;
      });
    } else {
      table.uints.sort(function (a, b) {
        return lua_lt(a, b) ? -1 : 1;
      });
    }
    return [];
  }
};

// bit (based on BitOp <http://bitop.luajit.org/>)
lua_libs["bit"] = {
  "tobit": function (x) {
    return [x << 0]
  },
  "tohex": function (x, n) {
    if (n > 0) {
      var str = x.toString(16).substr(-n);
      while (str.length < n) {
        str = "0" + str;
      }
      return [str];
    } else if (n < 0) {
      var str = x.toString(16).substr(n).toUpperCase();
      while (str.length < -n) {
        str = "0" + str;
      }
      return [str];
    } else {
      return [x.toString(16)]
    }
  },
  "bnot": function (x) {
    return [~x];
  },
  "bor": function () {
    var result = 0;
    for (var i = 0; i < arguments.length; i++) {
      result |= arguments[i];
    }
    return [result];
  },
  "band": function (x) {
    var result = 0;
    for (var i = 0; i < arguments.length; i++) {
      result &= arguments[i];
    }
    return [result];
  },
  "bxor": function (x) {
    var result = 0;
    for (var i = 0; i < arguments.length; i++) {
      result ^= arguments[i];
    }
    return [result];
  },
  "lshift": function (x, n) {
    return [x << n];
  },
  "rshift": function (x, n) {
    return [x >>> n];
  },
  "arshift": function (x, n) {
    return [x >> n];
  },
  "rol": function (x, n) {
    n &= 0xf;
    return [(x << n) | (x >>> -n)];
  },
  "ror": function (x, n) {
    n &= 0xf;
    return [(x >>> n) | (x << -n)];
  },
  "bswap": function (x) {
    // from Bit Twiddling hacks <http://graphics.stanford.edu/~seander/bithacks.html>
    x = ((x >> 1) & 0x55555555) | ((x & 0x55555555) << 1);
    x = ((x >> 2) & 0x33333333) | ((x & 0x33333333) << 2);
    x = ((x >> 4) & 0x0F0F0F0F) | ((x & 0x0F0F0F0F) << 4);
    x = ((x >> 8) & 0x00FF00FF) | ((x & 0x00FF00FF) << 8);
    x = (x >> 16) | (x << 16);
    return [x];
  }
};
